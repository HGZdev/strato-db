{"version":3,"sources":["../src/EventQueue.js"],"names":["dbg","warnedLatest","EventQueue","JsonModel","constructor","name","forever","withViews","rest","columns","v","type","autoIncrement","ts","value","o","Number","Date","now","index","data","result","size","default","get","key","Object","entries","TypeError","idCol","migrations","addTypeSizeIndex","db","exec","historySchema","all","some","f","event","_resolveNAP","clearTimeout","_addTimer","_NAPresolved","currentV","knownV","set","Error","latestVersion","process","env","NODE_ENV","stack","console","error","getMaxV","_addP","dataV","dataVersion","_dataV","_maxSql","prepare","quoted","lastRow","Math","max","add","Promise","reject","resolve","then","_addSql","lastID","run","JSON","stringify","_nextAddedResolve","_makeNAP","_nextAddedP","setTimeout","unref","getNext","noWait","searchOne","where","sort","cancelNext","setKnownV"],"mappings":";;;;;;;AAEA;;AACA;;;;;;;;;;;;AAEA,MAAMA,GAAG,GAAG,oBAAM,iBAAN,CAAZ;AAEA,IAAIC,YAAJ;AAEA;;;;;AAIA,MAAMC,UAAN,SAAyBC,kBAAzB,CAAmC;AAClC;;;;;;;;;;AAUA;;;;;;;;AAQAC,EAAAA,WAAW,OAAkD;AAAA,QAAjD;AAACC,MAAAA,IAAI,GAAG,SAAR;AAAmBC,MAAAA,OAAnB;AAA4BC,MAAAA;AAA5B,KAAiD;AAAA,QAAPC,IAAO;;AAC5D,UAAMC,OAAO,GAAG;AACfC,MAAAA,CAAC,EAAE;AACFC,QAAAA,IAAI,EAAE,SADJ;AAEFC,QAAAA,aAAa,EAAE;AAFb,OADY;AAKfD,MAAAA,IAAI,EAAE;AAACA,QAAAA,IAAI,EAAE;AAAP,OALS;AAMfE,MAAAA,EAAE,EAAE;AACHF,QAAAA,IAAI,EAAE,SADH;AAEHG,QAAAA,KAAK,EAAEC,CAAC,IAAIC,MAAM,CAACD,CAAC,CAACF,EAAH,CAAN,IAAgBI,IAAI,CAACC,GAAL,EAFzB;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OANW;AAWfC,MAAAA,IAAI,EAAE;AAACT,QAAAA,IAAI,EAAE;AAAP,OAXS;AAYfU,MAAAA,MAAM,EAAE;AAACV,QAAAA,IAAI,EAAE;AAAP,OAZO;AAafW,MAAAA,IAAI,EAAE;AAACX,QAAAA,IAAI,EAAE,SAAP;AAAkBY,QAAAA,OAAO,EAAE,CAA3B;AAA8BC,QAAAA,GAAG,EAAE;AAAnC;AAbS,KAAhB;AAeA,QAAIhB,IAAI,CAACC,OAAT,EACC,KAAK,MAAM,CAACgB,GAAD,EAAMX,KAAN,CAAX,IAA2BY,MAAM,CAACC,OAAP,CAAenB,IAAI,CAACC,OAApB,CAA3B,EAAyD;AACxD,UAAI,CAACK,KAAL,EAAY;AACZ,UAAIL,OAAO,CAACgB,GAAD,CAAX,EAAkB,MAAM,IAAIG,SAAJ,CAAe,0BAAyBH,GAAI,EAA5C,CAAN;AAClBhB,MAAAA,OAAO,CAACgB,GAAD,CAAP,GAAeX,KAAf;AACA;AACF,4BACIN,IADJ;AAECH,MAAAA,IAFD;AAGCwB,MAAAA,KAAK,EAAE,GAHR;AAICpB,MAAAA,OAJD;AAKCqB,MAAAA,UAAU,oBACNtB,IAAI,CAACsB,UADC;AAETC,QAAAA,gBAAgB,EAAE,CAAC;AAACC,UAAAA;AAAD,SAAD,KACjBA,EAAE,CAACC,IAAH,CACE,uEADF,CAHQ;AAMT,6BAAqB1B,SAAS,GAC3B,OAAO;AAACyB,UAAAA;AAAD,SAAP,KAAgB;AAChB,gBAAME,aAAa,GAAG,MAAMF,EAAE,CAACG,GAAH,CAAO,8BAAP,CAA5B,CADgB,CAEhB;;AACA,cAAI,CAACD,aAAa,CAACE,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAAChC,IAAF,KAAW,MAAnC,CAAL,EACC,MAAM2B,EAAE,CAACC,IAAH,CACJ,uDADI,CAAN,CAJe,CAOhB;;AACA,gBAAMD,EAAE,CAACC,IAAH,CAAS;;;;;;;;;;;;;;;;;;;;;;;;;QAAT,CAAN,CARgB,CAkChB;;AACA,gBAAMD,EAAE,CAACC,IAAH,CAAS,2BAAT,CAAN;AACC,SArC0B,GAsC3B;AA5CM;AALX;;AAtB4D,mCA+HrD,IA/HqD;;AAAA,yCAyK/C,IAzK+C;;AAAA,+CA2KzCK,KAAK,IAAI;AAC5B,UAAI,CAAC,KAAKC,WAAV,EAAuB;AACvBC,MAAAA,YAAY,CAAC,KAAKC,SAAN,CAAZ;AACA,WAAKC,YAAL,GAAoB,IAApB;;AACA,WAAKH,WAAL,CAAiBD,KAAjB;AACA,KAhL4D;;AA0E5D,SAAKK,QAAL,GAAgB,CAAC,CAAjB;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKtC,OAAL,GAAe,CAAC,CAACA,OAAjB;AACA;AAED;;;;;;;AAKAuC,EAAAA,GAAG,CAACP,KAAD,EAAQ;AACV,QAAI,CAACA,KAAK,CAAC5B,CAAX,EAAc;AACb,YAAM,IAAIoC,KAAJ,CAAU,0BAAV,CAAN;AACA;;AACD,SAAKH,QAAL,GAAgB,CAAC,CAAjB;AACA,WAAO,MAAME,GAAN,CAAUP,KAAV,CAAP;AACA;;AAEDS,EAAAA,aAAa,GAAG;AACf,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACjD,YAA9C,EAA4D;AAC3D,YAAM;AAACkD,QAAAA;AAAD,UAAU,IAAIL,KAAJ,CACf,gEADe,CAAhB,CAD2D,CAI3D;;AACAM,MAAAA,OAAO,CAACC,KAAR,CAAcF,KAAd;AACAlD,MAAAA,YAAY,GAAG,IAAf;AACA;;AACD,WAAO,KAAKqD,OAAL,EAAP;AACA;AAED;;;;;;AAIA,QAAMA,OAAN,GAAgB;AAAA;;AACf,QAAI,KAAKC,KAAT,EAAgB,MAAM,KAAKA,KAAX;AAEhB,UAAMC,KAAK,GAAG,MAAM,KAAKxB,EAAL,CAAQyB,WAAR,EAApB;;AACA,QAAI,KAAKd,QAAL,IAAiB,CAAjB,IAAsB,KAAKe,MAAL,KAAgBF,KAA1C,EAAiD;AAChD;AACA,aAAO,KAAKb,QAAZ;AACA;;AACD,SAAKe,MAAL,GAAcF,KAAd;AACA,QAAI,uBAAKG,OAAL,gEAAc3B,EAAd,MAAqB,KAAKA,EAA9B,EACC,KAAK2B,OAAL,GAAe,KAAK3B,EAAL,CAAQ4B,OAAR,CACb,2BAA0B,KAAKC,MAAO,EADzB,EAEd,MAFc,CAAf;AAID,UAAMC,OAAO,GAAG,MAAM,KAAKH,OAAL,CAAanC,GAAb,EAAtB;AACA,SAAKmB,QAAL,GAAgBoB,IAAI,CAACC,GAAL,CAAS,KAAKpB,MAAd,EAAsBkB,OAAO,CAACpD,CAAR,IAAa,CAAnC,CAAhB;AACA,WAAO,KAAKiC,QAAZ;AACA;;AAID;;;;;;;AAOAsB,EAAAA,GAAG,CAACtD,IAAD,EAAOS,IAAP,EAAaP,EAAb,EAAiB;AACnB,QAAI,CAACF,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EACC,OAAOuD,OAAO,CAACC,MAAR,CAAe,IAAIrB,KAAJ,CAAU,mCAAV,CAAf,CAAP;AACDjC,IAAAA,EAAE,GAAGG,MAAM,CAACH,EAAD,CAAN,IAAcI,IAAI,CAACC,GAAL,EAAnB,CAHmB,CAKnB;;AACA,SAAKqC,KAAL,GAAa,CAAC,KAAKA,KAAL,IAAcW,OAAO,CAACE,OAAR,EAAf,EAAkCC,IAAlC,CAAuC,YAAY;AAAA;;AAC/D;AACA;AACA;AACA,UAAI,uBAAKC,OAAL,gEAActC,EAAd,MAAqB,KAAKA,EAA9B,EACC,KAAKsC,OAAL,GAAe,KAAKtC,EAAL,CAAQ4B,OAAR,CACb,eAAc,KAAKC,MAAO,+BADb,EAEd,KAFc,CAAf;AAID,YAAM;AAACU,QAAAA,MAAM,EAAE7D;AAAT,UAAc,MAAM,KAAK4D,OAAL,CAAaE,GAAb,CAAiB,CAC1C7D,IAD0C,EAE1CE,EAF0C,EAG1C4D,IAAI,CAACC,SAAL,CAAetD,IAAf,CAH0C,CAAjB,CAA1B;AAMA,WAAKuB,QAAL,GAAgBjC,CAAhB;AAEA,YAAM4B,KAAK,GAAG;AAAC5B,QAAAA,CAAD;AAAIC,QAAAA,IAAJ;AAAUE,QAAAA,EAAV;AAAcO,QAAAA;AAAd,OAAd;AACApB,MAAAA,GAAG,CAAE,QAAF,EAAWU,CAAX,EAAcC,IAAd,CAAH;;AACA,UAAI,KAAKgE,iBAAT,EAA4B;AAC3B,aAAKA,iBAAL,CAAuBrC,KAAvB;AACA;;AACD,aAAOA,KAAP;AACA,KAvBY,CAAb;AAwBA,WAAO,KAAKiB,KAAZ;AACA;;AAWD;AACAqB,EAAAA,QAAQ,GAAG;AACV,QAAI,KAAKC,WAAL,IAAoB,CAAC,KAAKnC,YAA9B,EAA4C;AAC5C,SAAKmC,WAAL,GAAmB,IAAIX,OAAJ,CAAYE,OAAO,IAAI;AACzC,WAAK7B,WAAL,GAAmB6B,OAAnB;AACA,WAAK1B,YAAL,GAAoB,KAApB,CAFyC,CAGzC;;AACA,WAAKD,SAAL,GAAiBqC,UAAU,CAAC,KAAKH,iBAAN,EAAyB,KAAzB,CAA3B,CAJyC,CAKzC;AACA;;AACA,UAAI,CAAC,KAAKrE,OAAN,IAAiB,KAAKmC,SAAtB,IAAmC,KAAKA,SAAL,CAAesC,KAAtD,EACC,KAAKtC,SAAL,CAAesC,KAAf;AACD,KATkB,CAAnB;AAUA;AAED;;;;;;;;;AAOA,QAAMC,OAAN,CAActE,CAAC,GAAG,CAAlB,EAAqBuE,MAArB,EAA6B;AAC5B,QAAI3C,KAAJ;AACA,QAAI,CAAC2C,MAAL,EAAajF,GAAG,CAAE,GAAE,KAAKK,IAAK,6BAA4BK,CAAE,EAA5C,CAAH;;AACb,OAAG;AACF,WAAKkE,QAAL,GADE,CAEF;;;AACA,YAAMjC,QAAQ,GAAG,MAAM,KAAKW,OAAL,EAAvB;AACAhB,MAAAA,KAAK,GACJ5B,CAAC,GAAGiC,QAAJ,GACG;AACA,YAAM,KAAKuC,SAAL,CAAe,IAAf,EAAqB;AAC3BC,QAAAA,KAAK,EAAE;AAAC,mBAAS,CAACnE,MAAM,CAACN,CAAD,CAAP;AAAV,SADoB;AAE3B0E,QAAAA,IAAI,EAAE;AAAC1E,UAAAA,CAAC,EAAE;AAAJ;AAFqB,OAArB,CAFT,GAMG,IAPJ;AAQA,UAAI4B,KAAK,IAAI2C,MAAb,EAAqB,MAZnB,CAaF;AACA;;AACA3C,MAAAA,KAAK,GAAG,MAAM,KAAKuC,WAAnB;AACA,UAAIvC,KAAK,KAAK,QAAd,EAAwB,OAhBtB,CAiBF;;AACA,UAAI5B,CAAC,IAAI4B,KAAL,IAAcA,KAAK,CAAC5B,CAAN,GAAUA,CAA5B,EAA+B4B,KAAK,GAAG,IAAR;AAC/B,KAnBD,QAmBS,CAACA,KAnBV;;AAoBA,WAAOA,KAAP;AACA;AAED;;;;;AAGA+C,EAAAA,UAAU,GAAG;AACZ,QAAI,CAAC,KAAK9C,WAAV,EAAuB;;AACvB,SAAKA,WAAL,CAAiB,QAAjB;AACA;AAED;;;;;;;AAKA,QAAM+C,SAAN,CAAgB5E,CAAhB,EAAmB;AAClB;AACA;AACA;AACA;AACA,UAAM,KAAKsB,EAAL,CAAQC,IAAR,CACJ;uCACmCvB,CAAE,iBAAgB,KAAKmD,MAAO;;cAEvD,KAAKA,MAAO,KAAInD,CAAE;;IAJxB,CAAN;AAQA,SAAKiC,QAAL,GAAgBoB,IAAI,CAACC,GAAL,CAAS,KAAKrB,QAAd,EAAwBjC,CAAxB,CAAhB;AACA,SAAKkC,MAAL,GAAclC,CAAd;AACA;;AAjRiC;;eAoRpBR,U","sourcesContent":["// Note that this queue doesn't use any transactions by itself, to prevent deadlocks\n// Pass `forever: true` to keep Node running while waiting for events\nimport debug from 'debug'\nimport JsonModel from './JsonModel'\n\nconst dbg = debug('strato-db/queue')\n\nlet warnedLatest\n\n/**\n * An event queue, including history\n * @extends JsonModel\n */\nclass EventQueue extends JsonModel {\n\t/**\n\t * @typedef Event\n\t * @type {Object}\n\t * @property {Number} v - the version\n\t * @property {String} type - event type\n\t * @property {Number} ts - ms since epoch of event\n\t * @property {*} [data] - event data\n\t * @property {Object} [result] - event processing result\n\t */\n\n\t/**\n\t * Creates a new EventQueue model, called by DB\n\t * @constructor\n\t * @param  {string} [name='history'] - the table name\n\t * @param  {boolean} [forever] - should getNext poll forever?\n\t * @param  {boolean} [withViews] - add views to the database to assist with inspecting the data\n\t * @param  {Object} [...rest] - other params are passed to JsonModel\n\t */\n\tconstructor({name = 'history', forever, withViews, ...rest}) {\n\t\tconst columns = {\n\t\t\tv: {\n\t\t\t\ttype: 'INTEGER',\n\t\t\t\tautoIncrement: true,\n\t\t\t},\n\t\t\ttype: {type: 'TEXT'},\n\t\t\tts: {\n\t\t\t\ttype: 'INTEGER',\n\t\t\t\tvalue: o => Number(o.ts) || Date.now(),\n\t\t\t\tindex: 'ALL',\n\t\t\t},\n\t\t\tdata: {type: 'JSON'},\n\t\t\tresult: {type: 'JSON'},\n\t\t\tsize: {type: 'INTEGER', default: 0, get: false},\n\t\t}\n\t\tif (rest.columns)\n\t\t\tfor (const [key, value] of Object.entries(rest.columns)) {\n\t\t\t\tif (!value) continue\n\t\t\t\tif (columns[key]) throw new TypeError(`Cannot override column ${key}`)\n\t\t\t\tcolumns[key] = value\n\t\t\t}\n\t\tsuper({\n\t\t\t...rest,\n\t\t\tname,\n\t\t\tidCol: 'v',\n\t\t\tcolumns,\n\t\t\tmigrations: {\n\t\t\t\t...rest.migrations,\n\t\t\t\taddTypeSizeIndex: ({db}) =>\n\t\t\t\t\tdb.exec(\n\t\t\t\t\t\t`CREATE INDEX IF NOT EXISTS \"history type,size\" on history(type, size)`\n\t\t\t\t\t),\n\t\t\t\t'20190521_addViews': withViews\n\t\t\t\t\t? async ({db}) => {\n\t\t\t\t\t\t\tconst historySchema = await db.all('PRAGMA table_info(\"history\")')\n\t\t\t\t\t\t\t// This adds a field with data size, kept up-to-date with triggers\n\t\t\t\t\t\t\tif (!historySchema.some(f => f.name === 'size'))\n\t\t\t\t\t\t\t\tawait db.exec(\n\t\t\t\t\t\t\t\t\t`ALTER TABLE history ADD COLUMN size INTEGER DEFAULT 0`\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t// The size WHERE clause is to prevent recursive triggers\n\t\t\t\t\t\t\tawait db.exec(`\n\t\t\t\t\t\t\t\tDROP TRIGGER IF EXISTS \"history size insert\";\n\t\t\t\t\t\t\t\tDROP TRIGGER IF EXISTS \"history size update\";\n\t\t\t\t\t\t\t\tCREATE TRIGGER \"history size insert\" AFTER INSERT ON history BEGIN\n\t\t\t\t\t\t\t\t\tUPDATE history SET\n\t\t\t\t\t\t\t\t\t\tsize=ifNull(length(new.json),0)+ifNull(length(new.data),0)+ifNull(length(new.result),0)\n\t\t\t\t\t\t\t\t\tWHERE v=new.v;\n\t\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\t\tCREATE TRIGGER \"history size update\" AFTER UPDATE ON history BEGIN\n\t\t\t\t\t\t\t\t\tUPDATE history SET\n\t\t\t\t\t\t\t\t\t\tsize=ifNull(length(new.json),0)+ifNull(length(new.data),0)+ifNull(length(new.result),0)\n\t\t\t\t\t\t\t\t\tWHERE v=new.v AND size!=ifNull(length(new.json),0)+ifNull(length(new.data),0)+ifNull(length(new.result),0);\n\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\t\tDROP VIEW IF EXISTS _recentHistory;\n\t\t\t\t\t\t\t\tDROP VIEW IF EXISTS _historyTypes;\n\t\t\t\t\t\t\t\tCREATE VIEW _recentHistory AS\n\t\t\t\t\t\t\t\t\tSELECT datetime(ts/1000, \"unixepoch\", \"localtime\") AS t, *\n\t\t\t\t\t\t\t\t\tFROM history ORDER BY v DESC LIMIT 1000;\n\t\t\t\t\t\t\t\tCREATE VIEW _historyTypes AS\n\t\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t\t\tCOUNT(*) AS count,\n\t\t\t\t\t\t\t\t\t\tSUM(size)/1024/1024 AS MB\n\t\t\t\t\t\t\t\t\tFROM history GROUP BY type ORDER BY count DESC;\n\t\t\t\t\t\t\t`)\n\t\t\t\t\t\t\t// Recalculate size\n\t\t\t\t\t\t\tawait db.exec(`UPDATE history SET size=0`)\n\t\t\t\t\t  }\n\t\t\t\t\t: null,\n\t\t\t},\n\t\t})\n\t\tthis.currentV = -1\n\t\tthis.knownV = 0\n\t\tthis.forever = !!forever\n\t}\n\n\t/**\n\t * Replace existing event data\n\t * @param  {Event} event - the new event\n\t * @returns {Promise<void>} - Promise for set completion\n\t */\n\tset(event) {\n\t\tif (!event.v) {\n\t\t\tthrow new Error('cannot use set without v')\n\t\t}\n\t\tthis.currentV = -1\n\t\treturn super.set(event)\n\t}\n\n\tlatestVersion() {\n\t\tif (process.env.NODE_ENV !== 'production' && !warnedLatest) {\n\t\t\tconst {stack} = new Error(\n\t\t\t\t'EventQueue: latestVersion() is deprecated, use getMaxV instead'\n\t\t\t)\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(stack)\n\t\t\twarnedLatest = true\n\t\t}\n\t\treturn this.getMaxV()\n\t}\n\n\t/**\n\t * Get the highest version stored in the queue\n\t * @returns {Promise<number>} - the version\n\t */\n\tasync getMaxV() {\n\t\tif (this._addP) await this._addP\n\n\t\tconst dataV = await this.db.dataVersion()\n\t\tif (this.currentV >= 0 && this._dataV === dataV) {\n\t\t\t// If there was no change on other connections, currentV is correct\n\t\t\treturn this.currentV\n\t\t}\n\t\tthis._dataV = dataV\n\t\tif (this._maxSql?.db !== this.db)\n\t\t\tthis._maxSql = this.db.prepare(\n\t\t\t\t`SELECT MAX(v) AS v from ${this.quoted}`,\n\t\t\t\t'maxV'\n\t\t\t)\n\t\tconst lastRow = await this._maxSql.get()\n\t\tthis.currentV = Math.max(this.knownV, lastRow.v || 0)\n\t\treturn this.currentV\n\t}\n\n\t_addP = null\n\n\t/**\n\t * Atomically add an event to the queue\n\t * @param  {string} type - event type\n\t * @param  {*} [data] - event data\n\t * @param  {Number} [ts=Date.now()] - event timestamp, ms since epoch\n\t * @returns {Promise<Event>} - Promise for the added event\n\t */\n\tadd(type, data, ts) {\n\t\tif (!type || typeof type !== 'string')\n\t\t\treturn Promise.reject(new Error('type should be a non-empty string'))\n\t\tts = Number(ts) || Date.now()\n\n\t\t// We need to guarantee same-process in-order insertion, the sqlite3 lib doesn't do it :(\n\t\tthis._addP = (this._addP || Promise.resolve()).then(async () => {\n\t\t\t// Store promise so getMaxV can get the most recent v\n\t\t\t// Note that it replaces the promise for the previous add\n\t\t\t// sqlite-specific: INTEGER PRIMARY KEY is also the ROWID and therefore the lastID and v\n\t\t\tif (this._addSql?.db !== this.db)\n\t\t\t\tthis._addSql = this.db.prepare(\n\t\t\t\t\t`INSERT INTO ${this.quoted}(type,ts,data) VALUES (?,?,?)`,\n\t\t\t\t\t'add'\n\t\t\t\t)\n\t\t\tconst {lastID: v} = await this._addSql.run([\n\t\t\t\ttype,\n\t\t\t\tts,\n\t\t\t\tJSON.stringify(data),\n\t\t\t])\n\n\t\t\tthis.currentV = v\n\n\t\t\tconst event = {v, type, ts, data}\n\t\t\tdbg(`queued`, v, type)\n\t\t\tif (this._nextAddedResolve) {\n\t\t\t\tthis._nextAddedResolve(event)\n\t\t\t}\n\t\t\treturn event\n\t\t})\n\t\treturn this._addP\n\t}\n\n\t_nextAddedP = null\n\n\t_nextAddedResolve = event => {\n\t\tif (!this._resolveNAP) return\n\t\tclearTimeout(this._addTimer)\n\t\tthis._NAPresolved = true\n\t\tthis._resolveNAP(event)\n\t}\n\n\t// promise to wait for next event with timeout\n\t_makeNAP() {\n\t\tif (this._nextAddedP && !this._NAPresolved) return\n\t\tthis._nextAddedP = new Promise(resolve => {\n\t\t\tthis._resolveNAP = resolve\n\t\t\tthis._NAPresolved = false\n\t\t\t// Timeout after 10s so we can also get events from other processes\n\t\t\tthis._addTimer = setTimeout(this._nextAddedResolve, 10000)\n\t\t\t// if possible, mark the timer as non-blocking for process exit\n\t\t\t// some mocking libraries might forget to add unref()\n\t\t\tif (!this.forever && this._addTimer && this._addTimer.unref)\n\t\t\t\tthis._addTimer.unref()\n\t\t})\n\t}\n\n\t/**\n\t Get the next event after v (gaps are ok).\n\t The wait can be cancelled by `.cancelNext()`.\n\t * @param  {number} [v=0] the version\n\t * @param  {boolean} [noWait] do not wait for the next event\n\t * @returns {Promise<Event>} the event if found\n\t */\n\tasync getNext(v = 0, noWait) {\n\t\tlet event\n\t\tif (!noWait) dbg(`${this.name} waiting unlimited until >${v}`)\n\t\tdo {\n\t\t\tthis._makeNAP()\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst currentV = await this.getMaxV()\n\t\t\tevent =\n\t\t\t\tv < currentV\n\t\t\t\t\t? // eslint-disable-next-line no-await-in-loop\n\t\t\t\t\t  await this.searchOne(null, {\n\t\t\t\t\t\t\twhere: {'v > ?': [Number(v)]},\n\t\t\t\t\t\t\tsort: {v: 1},\n\t\t\t\t\t  })\n\t\t\t\t\t: null\n\t\t\tif (event || noWait) break\n\t\t\t// Wait for next one from this process\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tevent = await this._nextAddedP\n\t\t\tif (event === 'CANCEL') return\n\t\t\t// Ignore previous events\n\t\t\tif (v && event && event.v < v) event = null\n\t\t} while (!event)\n\t\treturn event\n\t}\n\n\t/**\n\t * Cancel any pending `.getNext()` calls\n\t */\n\tcancelNext() {\n\t\tif (!this._resolveNAP) return\n\t\tthis._resolveNAP('CANCEL')\n\t}\n\n\t/**\n\t * Set the latest known version.\n\t * New events will have higher versions.\n\t * @param  {number} v - the last known version\n\t */\n\tasync setKnownV(v) {\n\t\t// set the sqlite autoincrement value\n\t\t// Try changing current value, and insert if there was no change\n\t\t// This doesn't need a transaction, either one or the other runs\n\t\t// TODO alsoLower flag and only update where seq < v\n\t\tawait this.db.exec(\n\t\t\t`\n\t\t\t\tUPDATE sqlite_sequence SET seq = ${v} WHERE name = ${this.quoted};\n\t\t\t\tINSERT INTO sqlite_sequence (name, seq)\n\t\t\t\t\tSELECT ${this.quoted}, ${v} WHERE NOT EXISTS\n\t\t\t\t\t\t(SELECT changes() AS change FROM sqlite_sequence WHERE change <> 0);\n\t\t\t`\n\t\t)\n\t\tthis.currentV = Math.max(this.currentV, v)\n\t\tthis.knownV = v\n\t}\n}\n\nexport default EventQueue\n"],"file":"EventQueue.js"}