{"version":3,"sources":["../../src/lib/_test-helpers.js"],"names":["getModel","options","db","DB","addModel","JsonModel","name","keepRowId","sharedSetup","getPromise","fn","promise","testModels","count","columns","total","type","migrations","init","up","model","queue","expect","toBeTruthy","set","id","byType","preprocessor","event","Error","reducer","get","c","deriver","ignorer","args","store","result","currentCount","desc","Object","keys","withDBs","EQ","events","ret","Promise","all","close","withESDB","models","eSDB","ESDB","out"],"mappings":"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","sourcesContent":["import DB from '../DB'\nimport ESDB from '../EventSourcingDB'\nimport EQ from '../EventQueue'\nimport JsonModel from '../JsonModel'\n\nexport {DB, JsonModel}\n\nexport const getModel = options => {\n\tconst db = new DB()\n\treturn db.addModel(JsonModel, {name: 'testing', keepRowId: false, ...options})\n}\n\nexport const sharedSetup = getPromise => fn => {\n\tlet promise\n\treturn async () => {\n\t\tif (!promise) {\n\t\t\tpromise = getPromise()\n\t\t}\n\t\treturn fn(await promise)\n\t}\n}\n\nexport const testModels = {\n\tcount: {\n\t\t// shortName: 'c',\n\t\tcolumns: {\n\t\t\ttotal: {type: 'INTEGER'},\n\t\t},\n\t\tmigrations: {\n\t\t\tinit: {\n\t\t\t\tup({db, model, queue}) {\n\t\t\t\t\texpect(db).toBeTruthy()\n\t\t\t\t\texpect(queue).toBeTruthy()\n\t\t\t\t\treturn model.set({id: 'count', total: 0, byType: {}})\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tpreprocessor: async ({event}) => {\n\t\t\tif (event.type === 'error_pre') throw new Error('pre error for you')\n\t\t},\n\t\treducer: async ({model, event: {type}}) => {\n\t\t\tif (type === 'error_reduce') throw new Error('error for you')\n\t\t\tif (!model.get) return false\n\t\t\tconst c = (await model.get('count')) || {\n\t\t\t\tid: 'count',\n\t\t\t\ttotal: 0,\n\t\t\t\tbyType: {},\n\t\t\t}\n\t\t\tc.total++\n\t\t\tc.byType[type] = (c.byType[type] || 0) + 1\n\t\t\treturn {\n\t\t\t\tset: [c],\n\t\t\t\t// audit: '',\n\t\t\t}\n\t\t},\n\t\tderiver: async ({event}) => {\n\t\t\tif (event.type === 'error_derive') throw new Error('post error for you')\n\t\t},\n\t},\n\tignorer: {\n\t\t// eslint-disable-next-line no-unused-vars\n\t\treducer: args => {},\n\t},\n\tderiver: {\n\t\tderiver: async ({model, store, result, event}) => {\n\t\t\tif (result !== event.result[model.name]) {\n\t\t\t\tthrow new Error('Expecting event.result as separate input')\n\t\t\t}\n\t\t\tif (event.result.count) {\n\t\t\t\tconst currentCount = await store.count.get('count')\n\t\t\t\tawait model.set({\n\t\t\t\t\tid: 'descCount',\n\t\t\t\t\tdesc: `Total: ${currentCount.total}, seen types: ${Object.keys(\n\t\t\t\t\t\tcurrentCount.byType\n\t\t\t\t\t)}`,\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t},\n}\nconst withDBs = async fn => {\n\tconst db = new DB({name: 'D'})\n\tconst queue = new EQ({\n\t\tdb: new DB({name: 'Q'}),\n\t\tcolumns: {events: {type: 'JSON'}},\n\t})\n\tconst ret = await fn(db, queue)\n\tawait Promise.all([db.close(), queue.db.close()])\n\treturn ret\n}\nexport const withESDB = (fn, models = testModels) =>\n\twithDBs(async (db, queue) => {\n\t\tconst eSDB = new ESDB({queue, models, name: 'E'})\n\t\tconst out = await fn(eSDB, queue)\n\t\tawait eSDB.close()\n\t\treturn out\n\t})\n"],"file":"_test-helpers.js"}