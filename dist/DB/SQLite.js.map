{"version":3,"sources":["../../src/DB/SQLite.js"],"names":["dbg","dbgQ","extend","RETRY_COUNT","wait","ms","Promise","r","setTimeout","busyWait","Math","floor","random","getDuration","ts","performance","now","toLocaleString","undefined","maximumFractionDigits","objToString","o","s","compact","breakLength","Infinity","length","slice","quoteSqlId","toString","replace","valToSql","v","isBusyError","err","code","sql","args","strings","out","vars","i","val","str","found","exec","mod","push","JSON","stringify","quoteId","connId","SQLite","EventEmitter","constructor","file","readOnly","verbose","onWillOpen","onDidOpen","autoVacuum","vacuumInterval","vacuumPageCount","name","_sqlite","_store","_statements","rest","resolve","Object","keys","Error","join","path","basename","inTransaction","_isChild","store","statements","options","dbP","_resolveDbP","_openDB","reject","sqlite3","mode","OPEN_READONLY","OPEN_READWRITE","OPEN_CREATE","db","Database","message","configure","process","env","NODE_ENV","childDb","journal_mode","get","journalMode","catch","console","error","auto_vacuum","_vacuumToken","setInterval","_vacuumStep","unref","_optimizerToken","close","open","_dbP","then","result","clearInterval","stmt","values","finalize","_call","_hold","method","enabled","obj","returnThis","returnFn","isStmt","isStatement","_stmt","Array","isArray","pop","fnResult","cb","runQuery","busyRetry","lastID","changes","what","q","String","d","all","run","prepare","Statement","each","lastIdx","onRow","_","row","dataVersion","_dataVSql","data_version","userVersion","newV","Number","_userVSql","user_version","withTransaction","fn","nextTransaction","__withTransaction","transactionP","emit","_freeCountSql","freelist_count","left","t"],"mappings":"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","sourcesContent":["// @ts-check\nimport path from 'path'\nimport debug from 'debug'\nimport {performance} from 'perf_hooks'\nimport {inspect} from 'util'\nimport sqlite3 from 'sqlite3'\nimport Statement from './Statement'\nimport {EventEmitter} from 'events'\n\nconst dbg = debug('strato-db/sqlite')\nconst dbgQ = dbg.extend('query')\n\nconst RETRY_COUNT = 10\n\nconst wait = ms => new Promise(r => setTimeout(r, ms))\nconst busyWait = () => wait(200 + Math.floor(Math.random() * 1000))\n\nconst getDuration = ts =>\n\t(performance.now() - ts).toLocaleString(undefined, {maximumFractionDigits: 2})\n\nconst objToString = o => {\n\tconst s = inspect(o, {compact: true, breakLength: Infinity})\n\treturn s.length > 250 ? `${s.slice(0, 250)}… (${s.length}b)` : s\n}\n\nconst quoteSqlId = s => `\"${s.toString().replace(/\"/g, '\"\"')}\"`\n\nexport const valToSql = v => {\n\tif (typeof v === 'boolean') return v ? '1' : '0'\n\tif (typeof v === 'number') return v.toString()\n\tif (v == null) return 'NULL'\n\treturn `'${v.toString().replace(/'/g, \"''\")}'`\n}\n\nconst isBusyError = err => err.code === 'SQLITE_BUSY'\n\n/**\n * sql provides templating for SQL.\n *\n * Example:\n *   `` db.all`select * from ${'foo'}ID where ${'t'}LIT = ${bar} AND json = ${obj}JSON` ``\n *\n * is converted to\n *   `db.all('select * from \"foo\" where t = ? and json = ?', [bar, JSON.stringify(obj)])`\n *\n * @param  {Array<string>} template - the template\n * @param  {...any} interpolations - the template interpolations\n * @returns {array} - [out, variables] for consumption by the call method\n */\nexport const sql = (...args) => {\n\tconst strings = args[0]\n\tlet out = strings[0]\n\tconst vars = []\n\tfor (let i = 1; i < strings.length; i++) {\n\t\tconst val = args[i]\n\t\tlet str = strings[i]\n\n\t\tconst found = /^(ID|JSON|LIT)\\b/.exec(str)\n\t\tconst mod = found && found[0]\n\t\tstr = mod ? str.slice(mod.length) : str\n\n\t\tif (mod === 'ID') {\n\t\t\tout += quoteSqlId(val)\n\t\t} else if (mod === 'LIT') {\n\t\t\tout += val\n\t\t} else {\n\t\t\tout += '?'\n\t\t\tvars.push(mod === 'JSON' ? JSON.stringify(val) : val)\n\t\t}\n\t\tout += str\n\t}\n\treturn [out, vars]\n}\nsql.quoteId = quoteSqlId\n\nlet connId = 1\n\n/**\n * SQLite is a wrapper around a single SQLite connection (via node-sqlite3).\n * It provides a Promise API, lazy opening, auto-cleaning prepared statements\n * and safe ``db.run`select * from foo where bar=${bar}` `` templating.\n * @extends EventEmitter\n */\nclass SQLite extends EventEmitter {\n\t/**\n\t * @constructor\n\t * @param  {object} options -\n\t * @param  {string} [options.file] path to db file\n\t * @param  {boolean} [options.readOnly] open read-only\n\t * @param  {boolean} [options.verbose] verbose errors\n\t * @param  {function} [options.onWillOpen] called before opening\n\t * @param  {function} [options.onDidOpen] called after opened\n\t * @param  {string} [options.name] name for debugging\n\t * @param  {boolean} [options.autoVacuum] run incremental vacuum\n\t * @param  {number} [options.vacuumInterval] seconds between incremental vacuums\n\t * @param  {number} [options.vacuumPageCount] number of pages to clean per vacuum\n\t * @param  {object} [options._sqlite] sqlite instance for child dbs\n\t * @param  {object} [options._store={}] models registry for child dbs\n\t * @param  {object} [options._statements={}] statements registry for child dbs\n\t */\n\tconstructor({\n\t\tfile,\n\t\treadOnly,\n\t\tverbose,\n\t\tonWillOpen,\n\t\tonDidOpen,\n\t\tautoVacuum = false,\n\t\tvacuumInterval = 30, // seconds while vacuuming\n\t\tvacuumPageCount = 1024 / 4, // 1MB in 4k pages\n\t\tname,\n\t\t_sqlite,\n\t\t_store = {},\n\t\t_statements = {},\n\t\t...rest\n\t} = {}) {\n\t\tsuper()\n\n\t\tif (Object.keys(rest).length)\n\t\t\tthrow new Error(`Unknown options ${Object.keys(rest).join(',')}`)\n\t\tthis.file = file || ':memory:'\n\t\tthis.name = `${name || path.basename(this.file, '.db')}|${connId++}`\n\t\t// Are we in withTransaction?\n\t\tthis.inTransaction = false\n\t\tthis.readOnly = readOnly\n\t\tthis._isChild = !!_sqlite\n\t\tthis._sqlite = _sqlite\n\t\tthis.store = _store\n\t\tthis.statements = _statements\n\t\tthis.options = {\n\t\t\tonWillOpen,\n\t\t\tonDidOpen,\n\t\t\tverbose,\n\t\t\tautoVacuum,\n\t\t\tvacuumInterval,\n\t\t\tvacuumPageCount,\n\t\t}\n\t\tthis.dbP = new Promise(resolve => {\n\t\t\tthis._resolveDbP = resolve\n\t\t})\n\t}\n\n\tstatic sql = sql\n\n\tsql = sql\n\n\tasync _openDB() {\n\t\tconst {\n\t\t\tfile,\n\t\t\treadOnly,\n\t\t\t_isChild,\n\t\t\toptions: {verbose, onWillOpen, autoVacuum},\n\t\t} = this\n\t\tif (_isChild)\n\t\t\tthrow new Error(\n\t\t\t\t`Child dbs cannot be opened. Perhaps you kept a prepared statement from a child db?`\n\t\t\t)\n\n\t\tif (onWillOpen) await onWillOpen()\n\n\t\tdbg(`${this.name} opening ${this.file}`)\n\n\t\tconst _sqlite = await new Promise((resolve, reject) => {\n\t\t\tif (verbose) sqlite3.verbose()\n\t\t\tconst mode = readOnly\n\t\t\t\t? sqlite3.OPEN_READONLY\n\t\t\t\t: sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE\n\t\t\tconst db = new sqlite3.Database(file, mode, err => {\n\t\t\t\tif (err) reject(new Error(`${file}: ${err.message}`))\n\t\t\t\telse resolve(db)\n\t\t\t})\n\t\t})\n\n\t\t// Wait for locks\n\t\t_sqlite.configure(\n\t\t\t'busyTimeout',\n\t\t\tprocess.env.NODE_ENV === 'test'\n\t\t\t\t? 10\n\t\t\t\t: 1000 + Math.floor(Math.random() * 500)\n\t\t)\n\n\t\tconst childDb = new SQLite({\n\t\t\tfile: this.file,\n\t\t\treadOnly: this.readOnly,\n\t\t\tname: this.name,\n\t\t\t_sqlite,\n\t\t\t_store: this.store,\n\t\t})\n\n\t\t// in dev mode, 50% of the time, return unordered selects in reverse order (chosen once per open)\n\t\tif (process.env.NODE_ENV === 'development' && Math.random() > 0.5)\n\t\t\tawait childDb.exec('PRAGMA reverse_unordered_selects = ON')\n\n\t\tif (!this.readOnly) {\n\t\t\t// Make sure we have WAL journaling - cannot be done in transaction\n\t\t\tif (this.file !== ':memory:') {\n\t\t\t\tconst {journal_mode: mode} = await childDb.get('PRAGMA journal_mode')\n\t\t\t\tif (mode !== 'wal') {\n\t\t\t\t\tconst {journal_mode: journalMode} = await childDb\n\t\t\t\t\t\t.get('PRAGMA journal_mode = wal')\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tif (!isBusyError(err)) throw err\n\t\t\t\t\t\t})\n\t\t\t\t\tif (journalMode !== 'wal') {\n\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t`!!! WARNING: journal_mode is ${journalMode}, not WAL. Locking issues might occur!`\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (autoVacuum) {\n\t\t\t\tconst {auto_vacuum: mode} = await childDb.get(`PRAGMA auto_vacuum`)\n\t\t\t\tif (mode !== 2) {\n\t\t\t\t\tawait childDb\n\t\t\t\t\t\t.exec(`PRAGMA auto_vacuum=INCREMENTAL; VACUUM`)\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tif (!isBusyError(err)) throw err\n\t\t\t\t\t\t\tthis.options.autoVacuum = false\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tconst {vacuumInterval} = this.options\n\t\t\t\tthis._vacuumToken = setInterval(\n\t\t\t\t\t() => this._vacuumStep(),\n\t\t\t\t\tvacuumInterval * 10 * 1000\n\t\t\t\t)\n\t\t\t\tthis._vacuumToken.unref()\n\t\t\t}\n\t\t\t// Some sane settings\n\t\t\tawait childDb.exec(`\n\t\t\t\t\tPRAGMA foreign_keys = ON;\n\t\t\t\t\tPRAGMA recursive_triggers = ON;\n\t\t\t\t\tPRAGMA journal_size_limit = 4000000\n\t\t\t\t`)\n\t\t\tthis._optimizerToken = setInterval(\n\t\t\t\t() => this.exec(`PRAGMA optimize`),\n\t\t\t\t2 * 3600 * 1000\n\t\t\t)\n\t\t\tthis._optimizerToken.unref()\n\n\t\t\tif (this.options.onDidOpen) await this.options.onDidOpen(childDb)\n\t\t\tawait childDb.close()\n\t\t}\n\n\t\tthis._sqlite = _sqlite\n\n\t\tdbg(`${this.name} opened  ${file}`)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Force opening the database instead of doing it lazily on first access\n\t * @returns {Promise<void>} - a promise for the DB being ready to use\n\t */\n\topen() {\n\t\tconst {_resolveDbP} = this\n\t\tif (_resolveDbP) {\n\t\t\tthis._resolveDbP = null\n\t\t\tthis._dbP = this._openDB().then(result => {\n\t\t\t\t_resolveDbP(result)\n\t\t\t\tthis._dbP = null\n\t\t\t\treturn result\n\t\t\t})\n\t\t}\n\t\treturn this.dbP\n\t}\n\n\t/**\n\t * Close the database connection, including the prepared statements\n\t * @returns {Promise<void>} - a promise for the DB being closed\n\t */\n\tasync close() {\n\t\tif (!this._isChild) dbg(`${this.name} closing`)\n\n\t\tthis.dbP = new Promise(resolve => {\n\t\t\tthis._resolveDbP = resolve\n\t\t})\n\t\tif (this._optimizerToken) {\n\t\t\tclearInterval(this._optimizerToken)\n\t\t\tthis._optimizerToken = null\n\t\t}\n\t\tif (this._vacuumToken) {\n\t\t\tclearInterval(this._vacuumToken)\n\t\t\tthis._vacuumToken = null\n\t\t}\n\t\tconst {_sqlite} = this\n\t\tthis._sqlite = null\n\n\t\t// eslint-disable-next-line no-await-in-loop\n\t\tfor (const stmt of Object.values(this.statements)) await stmt.finalize()\n\n\t\t// We only want to close our own statements, not the db\n\t\tif (this._isChild) {\n\t\t\tdbg(`${this.name} child db closed`)\n\t\t\treturn\n\t\t}\n\n\t\tclearInterval(this._optimizerToken)\n\t\tif (this._dbP) await this._dbP\n\t\tif (_sqlite) await this._call('close', [], _sqlite, this.name)\n\t\tdbg(`${this.name} closed`)\n\t}\n\n\tasync _hold(method) {\n\t\tif (dbgQ.enabled) dbgQ('_hold', this.name, method)\n\t\tawait this.open()\n\t\treturn this._sqlite\n\t}\n\n\t// eslint-disable-next-line max-params\n\tasync _call(method, args, obj, name, returnThis, returnFn) {\n\t\tconst isStmt = obj && obj.isStatement\n\t\tlet _sqlite\n\t\tif (!obj) _sqlite = await this._hold(method)\n\t\telse if (isStmt) _sqlite = obj._stmt\n\t\telse _sqlite = obj\n\t\tif (!_sqlite)\n\t\t\tthrow new Error(`${name}: sqlite or statement not initialized`)\n\n\t\t// Template strings\n\t\tif (!isStmt && Array.isArray(args[0])) {\n\t\t\targs = sql(...args)\n\t\t\tif (!args[1].length) args.pop()\n\t\t}\n\n\t\tconst now = dbgQ.enabled ? performance.now() : undefined\n\t\tlet fnResult\n\t\tconst result = new Promise((resolve, reject) => {\n\t\t\t// eslint-disable-next-line prefer-const\n\t\t\tlet cb\n\t\t\tconst runQuery = () => {\n\t\t\t\tfnResult = _sqlite[method](...(args || []), cb)\n\t\t\t}\n\t\t\tlet busyRetry = RETRY_COUNT\n\t\t\t// We need to consume `this` from sqlite3 callback\n\t\t\tcb = function(err, out) {\n\t\t\t\tif (err) {\n\t\t\t\t\tif (isBusyError(err) && busyRetry--) {\n\t\t\t\t\t\treturn busyWait().then(runQuery)\n\t\t\t\t\t}\n\t\t\t\t\tconst error = new Error(`${name}: sqlite3: ${err.message}`)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\terror.code = err.code\n\t\t\t\t\treject(error)\n\t\t\t\t} else\n\t\t\t\t\tresolve(\n\t\t\t\t\t\treturnFn\n\t\t\t\t\t\t\t? fnResult\n\t\t\t\t\t\t\t: returnThis\n\t\t\t\t\t\t\t? {lastID: this.lastID, changes: this.changes}\n\t\t\t\t\t\t\t: out\n\t\t\t\t\t)\n\t\t\t}\n\t\t\tif (!_sqlite[method])\n\t\t\t\treturn cb({message: `method ${method} not supported`})\n\t\t\tfnResult = _sqlite[method](...(args || []), cb)\n\t\t})\n\t\tif (dbgQ.enabled) {\n\t\t\tconst what = `${name}.${method}`\n\t\t\tconst q = isStmt ? `` : String(args[0]).replace(/\\s+/g, ' ')\n\t\t\tconst v = args\n\t\t\t\t? isStmt\n\t\t\t\t\t? objToString(args)\n\t\t\t\t\t: objToString(args[isStmt ? 0 : 1])\n\t\t\t\t: ''\n\t\t\t// eslint-disable-next-line promise/catch-or-return\n\t\t\tresult.then(\n\t\t\t\to => {\n\t\t\t\t\tif (returnFn) o = fnResult\n\t\t\t\t\tconst d = getDuration(now)\n\t\t\t\t\tconst out =\n\t\t\t\t\t\tmethod !== 'exec' && method !== 'prepare'\n\t\t\t\t\t\t\t? `-> ${objToString(o)}`\n\t\t\t\t\t\t\t: ''\n\t\t\t\t\treturn dbgQ(`${what} ${q} ${v} ${d}ms ${out}`)\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tconst d = getDuration(now)\n\t\t\t\t\tdbgQ(`${what} SQLite error: ${err.message} ${q} ${v}${d}ms `)\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t\treturn result\n\t}\n\n\t/**\n\t * Return all rows for the given query\n\t * @param {string} sql - the SQL statement to be executed\n\t * @param {Array<*>} [vars] - the variables to be bound to the statement\n\t * @returns {Promise<Array<object>>} - the results\n\t */\n\tall(...args) {\n\t\treturn this._call('all', args, this._sqlite, this.name)\n\t}\n\n\t/**\n\t * Return the first row for the given query\n\t * @param {string} sql - the SQL statement to be executed\n\t * @param {Array<*>} [vars] - the variables to be bound to the statement\n\t * @returns {Promise<(object|null)>} - the result or falsy if missing\n\t */\n\tget(...args) {\n\t\treturn this._call('get', args, this._sqlite, this.name)\n\t}\n\n\t/**\n\t * Run the given query and return the metadata\n\t * @param {string} sql - the SQL statement to be executed\n\t * @param {Array<*>} [vars] - the variables to be bound to the statement\n\t * @returns {Promise<object>} - an object with `lastID` and `changes`\n\t */\n\trun(...args) {\n\t\treturn this._call('run', args, this._sqlite, this.name, true)\n\t}\n\n\t/**\n\t * Run the given query and return nothing. Slightly more efficient than {@link run}\n\t * @param {string} sql - the SQL statement to be executed\n\t * @param {Array<*>} [vars] - the variables to be bound to the statement\n\t * @returns {Promise<void>} - a promise for execution completion\n\t */\n\tasync exec(...args) {\n\t\tawait this._call('exec', args, this._sqlite, this.name)\n\t}\n\n\t/**\n\t * Register an SQL statement for repeated running. This will store the SQL\n\t * and will prepare the statement with SQLite whenever needed, as well as\n\t * finalize it when closing the connection.\n\t * @param {string} sql - the SQL statement to be executed\n\t * @param {string} [name] - a short name to use in debug logs\n\t * @returns {Statement} - the statement\n\t */\n\tprepare(sql, name) {\n\t\tif (this.statements[sql]) return this.statements[sql]\n\t\treturn new Statement(this, sql, name)\n\t}\n\n\t/**\n\t * Run the given query and call the function on each item.\n\t * Note that node-sqlite3 seems to just fetch all data in one go.\n\t * @param {string} sql - the SQL statement to be executed\n\t * @param {Array<*>} [vars] - the variables to be bound to the statement\n\t * @param {function} cb(row) - the function to call on each row\n\t * @returns {Promise<void>} - a promise for execution completion\n\t */\n\teach(...args) {\n\t\tconst lastIdx = args.length - 1\n\t\tif (typeof args[lastIdx] === 'function') {\n\t\t\t// err is always null, no reason to have it\n\t\t\tconst onRow = args[lastIdx]\n\t\t\targs[lastIdx] = (_, row) => onRow(row)\n\t\t}\n\t\treturn this._call('each', args, this._sqlite, this.name)\n\t}\n\n\t/**\n\t * Returns the data_version, which increases when other connections write\n\t * to the database.\n\t * @returns {Promise<number>} - the data version\n\t */\n\tasync dataVersion() {\n\t\tif (!this._sqlite) await this._hold('dataVersion')\n\t\tif (!this._dataVSql)\n\t\t\tthis._dataVSql = this.prepare('PRAGMA data_version', 'dataV')\n\t\tconst {data_version: v} = await this._dataVSql.get()\n\t\treturn v\n\t}\n\n\t/**\n\t * Returns or sets the user_version, an arbitrary integer connected\n\t * to the database.\n\t * @param {number} [newV] - if given, sets the user version\n\t * @returns {Promise<(number|void)>} - the user version or nothing when setting\n\t */\n\tasync userVersion(newV) {\n\t\tif (!this._sqlite) await this._hold('userVersion')\n\t\t// Can't prepare or use pragma with parameter\n\t\tif (newV)\n\t\t\treturn this._call(\n\t\t\t\t'exec',\n\t\t\t\t[`PRAGMA user_version=${Number(newV)}`],\n\t\t\t\tthis._sqlite,\n\t\t\t\tthis.name\n\t\t\t)\n\t\tif (!this._userVSql)\n\t\t\tthis._userVSql = this.prepare('PRAGMA user_version', 'userV')\n\t\tconst {user_version: v} = await this._userVSql.get()\n\t\treturn v\n\t}\n\n\ttransactionP = Promise.resolve()\n\n\t/**\n\t * Run a function in an immediate transaction. Within a connection, the invocations\n\t * are serialized, and between connections it uses busy retry waiting. During a\n\t * transaction, the database can still be read.\n\t * @param {function} fn - the function to call. It doesn't get any parameters\n\t * @returns {Promise<void>} - a promise for transaction completion.\n\t * @throws - when the transaction fails or after too many retries\n\t */\n\tasync withTransaction(fn) {\n\t\tif (this.readOnly) throw new Error(`${this.name}: DB is readonly`)\n\t\tif (!this._sqlite) await this._hold('transaction')\n\n\t\t// Prevent overlapping transactions in this process\n\t\tconst nextTransaction = () => this.__withTransaction(fn)\n\n\t\tthis.transactionP = this.transactionP.then(nextTransaction, nextTransaction)\n\t\treturn this.transactionP\n\t}\n\n\tasync __withTransaction(fn, busyRetry = RETRY_COUNT) {\n\t\ttry {\n\t\t\tthis.inTransaction = true\n\t\t\tawait this.exec(`BEGIN IMMEDIATE`)\n\t\t\tthis.emit('begin')\n\t\t} catch (error) {\n\t\t\tif (isBusyError(error) && busyRetry) {\n\t\t\t\t// Transaction already running\n\t\t\t\tif (busyRetry === RETRY_COUNT) dbg(`${this.name} DB is busy, retrying`)\n\t\t\t\tawait busyWait()\n\t\t\t\treturn this.__withTransaction(fn, busyRetry - 1)\n\t\t\t}\n\t\t\tthis.inTransaction = false\n\t\t\tthrow error\n\t\t}\n\t\tlet result\n\t\ttry {\n\t\t\tresult = await fn()\n\t\t} catch (error) {\n\t\t\tif (process.env.NODE_ENV !== 'test')\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.error(\n\t\t\t\t\t`${this.name} !!! transaction failure, rolling back`,\n\t\t\t\t\terror\n\t\t\t\t)\n\t\t\tawait this.exec(`ROLLBACK`)\n\t\t\tthis.inTransaction = false\n\t\t\tthis.emit('rollback')\n\t\t\tthis.emit('finally')\n\t\t\tthrow error\n\t\t}\n\t\tawait this.exec(`END`)\n\t\tthis.inTransaction = false\n\t\tthis.emit('end')\n\t\tthis.emit('finally')\n\t\treturn result\n\t}\n\n\tasync _vacuumStep() {\n\t\tif (!this._sqlite) return\n\t\tconst {vacuumInterval, vacuumPageCount} = this.options\n\t\tif (!this._freeCountSql)\n\t\t\tthis._freeCountSql = this.prepare('PRAGMA freelist_count', 'freeCount')\n\t\tconst {freelist_count: left} = await this._freeCountSql.get()\n\t\t// leave some free pages in there\n\t\tif (left < vacuumPageCount * 20 || !this._sqlite) return\n\t\tawait this.exec(`PRAGMA incremental_vacuum(${vacuumPageCount})`)\n\t\tconst t = setTimeout(() => this._vacuumStep(), vacuumInterval * 1000)\n\t\tt.unref()\n\t}\n}\n\nexport default SQLite\n"],"file":"SQLite.js"}