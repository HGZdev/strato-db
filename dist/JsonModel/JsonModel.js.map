{"version":3,"sources":["../../src/JsonModel/JsonModel.js"],"names":["dbg","JsonModel","constructor","options","row","mapCols","cols","map","n","columns","getCols","out","Item","k","val","enabled","parse","alias","error","name","String","slice","path","real","prevVal","Object","assign","thing","Array","isArray","r","parseRow","db","migrations","migrationOptions","ItemClass","idCol","keepRowId","quoted","sql","quoteId","idColQ","idColDef","jsonColDef","json","allColumns","type","value","index","autoIncrement","unique","get","parseJson","stringify","stringifyJsonObject","alwaysObject","columnArr","i","keys","colDef","col","columnName","TypeError","push","filter","c","sort","byPathLength","registerMigrations","_set","_makeSetFn","selectCols","selectColNames","selectColAliases","selectColsSql","select","join","valueCols","realCols","byPathLengthDesc","valueI","indexOf","setCols","reverse","mutators","Set","parts","length","add","mutatePaths","a","b","split","cloneObj","obj","colSqls","setSql","o","insertOnly","noReturn","_insertSql","prepare","updateSql","_updateSql","results","Promise","all","call","forEach","colVals","v","undefined","P","run","then","result","newObj","lastID","_colSql","colName","makeSelect","process","env","NODE_ENV","extras","includes","console","warn","attrs","joinVals","where","limit","offset","cursor","noCursor","noTotal","cursorColNames","cursorQ","cursorArgs","makeCursor","sortNames","Math","abs","copiedCols","vals","jsurl","getDir","l","unshift","colsSql","selectQ","conds","w","Error","origVal","whereVal","valid","orderQ","limitQ","Number","offsetQ","calcTotal","allConds","allVals","allWhereQ","whereQ","q","Boolean","totalQ","searchOne","toObj","search","itemsOnly","cursorKeys","totalVals","rows","totalO","items","last","short","total","t","searchAll","exists","_existsSql","count","numAggOp","op","ignoreNull","max","min","sum","avg","_allSql","id","reject","_getSql","getAll","ids","_getAllSql","isSelected","JSON","objs","find","getCached","cache","key","DataLoader","maxBatchSize","load","clearCache","clear","clearAll","each","fn","set","args","updateNoTrans","upsert","prev","entries","update","inTransaction","withTransaction","remove","idOrObj","_deleteSql","delete","DEV","changeId","oldId","newId","_changeIdSql","changes"],"mappings":"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","sourcesContent":["import debug from 'debug'\nimport jsurl from '@yaska-eu/jsurl2'\nimport {sql} from '../DB'\nimport DataLoader from 'dataloader'\nimport {get, set} from 'lodash'\nimport {normalizeColumn} from './normalizeColumn'\nimport {assignJsonParents} from './assignJsonParents'\nimport {\n\tparseJson,\n\tstringifyJsonObject,\n\tprepareSqlCol,\n\tbyPathLength,\n\tbyPathLengthDesc,\n} from './prepareSqlCol'\nimport {verifyOptions, verifyColumn} from './verifyOptions'\nimport {makeMigrations} from './makeMigrations'\nimport {makeIdValue} from './makeDefaultIdValue'\nimport {settleAll} from '../lib/settleAll'\nimport {DEV, deprecated} from '../lib/warning'\n\nconst dbg = debug('strato-db/JSON')\n\n/**\n * JsonModel is a simple document store. It stores its data in SQLite as a table, one row\n * per object (document). Each object must have a unique ID, normally at `obj.id`.\n */\nclass JsonModel {\n\t/**\n\t * Creates a new JsonModel instance\n\t * @param\t{JMOptions} options - the model declaration\n\t */\n\tconstructor(options) {\n\t\tverifyOptions(options)\n\t\tconst {\n\t\t\tdb,\n\t\t\tname,\n\t\t\tmigrations,\n\t\t\tmigrationOptions,\n\t\t\tcolumns,\n\t\t\tItemClass,\n\t\t\tidCol = 'id',\n\t\t\tkeepRowId = true,\n\t\t} = options\n\n\t\tthis.db = db\n\t\tthis.name = name\n\t\tthis.quoted = sql.quoteId(name)\n\t\tthis.idCol = idCol\n\t\tthis.idColQ = sql.quoteId(idCol)\n\t\tthis.Item = ItemClass\n\n\t\tconst idColDef = (columns && columns[idCol]) || {}\n\t\tconst jsonColDef = (columns && columns.json) || {}\n\t\tconst allColumns = {\n\t\t\t...columns,\n\t\t\t[idCol]: {\n\t\t\t\ttype: idColDef.type || 'TEXT',\n\t\t\t\talias: idColDef.alias || '_i',\n\t\t\t\tvalue: makeIdValue(idCol, idColDef),\n\t\t\t\tindex: 'ALL',\n\t\t\t\tautoIncrement: idColDef.autoIncrement,\n\t\t\t\tunique: true,\n\t\t\t\tget: true,\n\t\t\t},\n\t\t\tjson: {\n\t\t\t\talias: jsonColDef.alias || '_j',\n\t\t\t\t// return null if empty, makes parseRow faster\n\t\t\t\tparse: jsonColDef.parse || parseJson,\n\t\t\t\tstringify: jsonColDef.stringify || stringifyJsonObject,\n\t\t\t\ttype: 'JSON',\n\t\t\t\talwaysObject: true,\n\t\t\t\tpath: '',\n\t\t\t\tget: true,\n\t\t\t},\n\t\t}\n\t\t// Note the order above, id and json should be calculated last\n\t\tthis.columnArr = []\n\t\tthis.columns = {}\n\t\tlet i = 0\n\t\tfor (const name of Object.keys(allColumns)) {\n\t\t\tconst colDef = allColumns[name]\n\t\t\tlet col\n\t\t\tif (typeof colDef === 'function') {\n\t\t\t\tcol = colDef({columnName: name})\n\t\t\t\tverifyColumn(name, col)\n\t\t\t} else {\n\t\t\t\tcol = {...colDef}\n\t\t\t}\n\t\t\tcol.alias = col.alias || `_${i++}`\n\t\t\tif (this.columns[col.alias])\n\t\t\t\tthrow new TypeError(\n\t\t\t\t\t`Cannot alias ${col.name} over existing name ${col.alias}`\n\t\t\t\t)\n\n\t\t\tnormalizeColumn(col, name)\n\t\t\tthis.columns[name] = col\n\t\t\tthis.columns[col.alias] = col\n\t\t\tthis.columnArr.push(col)\n\t\t}\n\t\tassignJsonParents(this.columnArr)\n\t\tfor (const col of this.columnArr) prepareSqlCol(col)\n\t\tthis.getCols = this.columnArr.filter(c => c.get).sort(byPathLength)\n\n\t\tthis.db.registerMigrations(\n\t\t\tname,\n\t\t\tmakeMigrations({\n\t\t\t\tname: this.name,\n\t\t\t\tcolumns: this.columns,\n\t\t\t\tidCol,\n\t\t\t\tkeepRowId,\n\t\t\t\tmigrations,\n\t\t\t\tmigrationOptions,\n\t\t\t})\n\t\t)\n\n\t\tthis._set = this._makeSetFn()\n\t\t// The columns we should normally fetch - json + get columns\n\n\t\tthis.selectCols = this.columnArr.filter(c => c.get || c.name === 'json')\n\t\tthis.selectColNames = this.selectCols.map(c => c.name)\n\t\tthis.selectColAliases = this.selectCols.map(c => c.alias)\n\t\tthis.selectColsSql = this.selectCols.map(c => c.select).join(',')\n\t}\n\n\t/**\n\t * parses a row as returned by sqlite\n\t * @param {object} row - result from sqlite\n\t * @param {object} options - an object possibly containing the `cols` array with the desired column names\n\t * @returns {object} - the resulting object (document)\n\t */\n\tparseRow = (row, options) => {\n\t\tconst mapCols =\n\t\t\toptions && options.cols\n\t\t\t\t? options.cols.map(n => this.columns[n])\n\t\t\t\t: this.getCols\n\t\tconst out = this.Item ? new this.Item() : {}\n\t\tfor (const k of mapCols) {\n\t\t\tlet val\n\t\t\tif (dbg.enabled) {\n\t\t\t\ttry {\n\t\t\t\t\tval = k.parse ? k.parse(row[k.alias]) : row[k.alias]\n\t\t\t\t} catch (error) {\n\t\t\t\t\tdbg(\n\t\t\t\t\t\t`!!! ${this.name}.${k.name}:  parse failed for value ${String(\n\t\t\t\t\t\t\trow[k.alias]\n\t\t\t\t\t\t).slice(0, 20)}`\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tval = k.parse ? k.parse(row[k.alias]) : row[k.alias]\n\t\t\t}\n\t\t\tif (val != null) {\n\t\t\t\tif (k.path) {\n\t\t\t\t\tif (k.real) {\n\t\t\t\t\t\tconst prevVal = get(out, k.path)\n\t\t\t\t\t\t// Prevent added columns from overwriting existing data\n\t\t\t\t\t\t// eslint-disable-next-line max-depth\n\t\t\t\t\t\tif (typeof prevVal !== 'undefined') continue\n\t\t\t\t\t}\n\t\t\t\t\tset(out, k.path, val)\n\t\t\t\t} else Object.assign(out, val) // json col\n\t\t\t}\n\t\t}\n\t\treturn out\n\t}\n\n\t_makeSetFn() {\n\t\tconst {Item} = this\n\t\tconst valueCols = this.columnArr.filter(c => c.value).sort(byPathLength)\n\t\tconst realCols = this.columnArr\n\t\t\t.filter(c => c.real)\n\t\t\t.sort(byPathLengthDesc)\n\t\t\t.map((c, i) => ({\n\t\t\t\t...c,\n\t\t\t\ti,\n\t\t\t\tvalueI: c.value && valueCols.indexOf(c),\n\t\t\t}))\n\t\t// This doesn't include sql expressions, you need to .get() for those\n\t\tconst setCols = [...realCols].filter(c => c.get).reverse()\n\t\tconst mutators = new Set()\n\t\tfor (const col of valueCols) {\n\t\t\tfor (let i = 1; i < col.parts.length; i++)\n\t\t\t\tmutators.add(col.parts.slice(0, i).join('.'))\n\t\t}\n\t\tfor (const col of realCols) {\n\t\t\tfor (let i = 1; i < col.parts.length; i++)\n\t\t\t\tif (col.get) mutators.add(col.parts.slice(0, i).join('.'))\n\t\t}\n\t\tconst mutatePaths = [...mutators].sort(\n\t\t\t(a, b) => (a ? a.split('.').length : 0) - (b ? b.split('.').length : 0)\n\t\t)\n\t\tconst cloneObj = mutatePaths.length\n\t\t\t? obj => {\n\t\t\t\t\tobj = {...obj}\n\t\t\t\t\tfor (const path of mutatePaths) {\n\t\t\t\t\t\tset(obj, path, {...get(obj, path)})\n\t\t\t\t\t}\n\t\t\t\t\treturn obj\n\t\t\t  }\n\t\t\t: obj => ({...obj})\n\t\tconst colSqls = realCols.map(col => col.quoted)\n\t\tconst setSql = `INTO ${this.quoted}(${colSqls.join()}) VALUES(${colSqls\n\t\t\t.map(() => '?')\n\t\t\t.join()})`\n\t\treturn async (o, insertOnly, noReturn) => {\n\t\t\tif (this._insertSql?.db !== this.db) {\n\t\t\t\tthis._insertSql = this.db.prepare(\n\t\t\t\t\t`INSERT ${setSql}`,\n\t\t\t\t\t`ins ${this.name}`\n\t\t\t\t)\n\t\t\t\tconst updateSql = colSqls\n\t\t\t\t\t.map((col, i) => `${col} = ?${i + 1}`)\n\t\t\t\t\t.join(', ')\n\t\t\t\tthis._updateSql = this.db.prepare(\n\t\t\t\t\t`INSERT ${setSql} ON CONFLICT(${this.idCol}) DO UPDATE SET ${updateSql}`,\n\t\t\t\t\t`set ${this.name}`\n\t\t\t\t)\n\t\t\t}\n\t\t\tconst {_insertSql, _updateSql} = this\n\t\t\tconst obj = cloneObj(o)\n\t\t\tconst results = await Promise.all(\n\t\t\t\tvalueCols.map(col =>\n\t\t\t\t\t// value functions must be able to use other db during migrations, so call with our this\n\t\t\t\t\tcol.value.call(this, obj)\n\t\t\t\t)\n\t\t\t)\n\t\t\tresults.forEach((r, i) => {\n\t\t\t\tconst col = valueCols[i]\n\t\t\t\t// realCol values can be different from obj values\n\t\t\t\tif (col.path && (!col.real || col.get)) set(obj, col.path, r)\n\t\t\t})\n\t\t\tconst colVals = realCols.map(col => {\n\t\t\t\tlet v\n\t\t\t\tif (col.path) {\n\t\t\t\t\tif (col.value) v = results[col.valueI]\n\t\t\t\t\telse v = get(obj, col.path)\n\t\t\t\t\tif (col.get) set(obj, col.path, undefined)\n\t\t\t\t} else {\n\t\t\t\t\tv = obj\n\t\t\t\t}\n\t\t\t\treturn col.stringify ? col.stringify(v) : v\n\t\t\t})\n\n\t\t\t// The json field is part of the colVals\n\t\t\tconst P = insertOnly ? _insertSql.run(colVals) : _updateSql.run(colVals)\n\t\t\treturn noReturn\n\t\t\t\t? P\n\t\t\t\t: P.then(result => {\n\t\t\t\t\t\t// Return what get(id) would return\n\t\t\t\t\t\tconst newObj = Item ? new Item() : {}\n\t\t\t\t\t\tsetCols.forEach(col => {\n\t\t\t\t\t\t\tconst val = colVals[col.i]\n\t\t\t\t\t\t\tconst v = col.parse ? col.parse(val) : val\n\t\t\t\t\t\t\tif (col.path === '') Object.assign(newObj, v)\n\t\t\t\t\t\t\telse set(newObj, col.path, v)\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif (newObj[this.idCol] == null) {\n\t\t\t\t\t\t\t// This can only happen for integer ids, so we use the last inserted rowid\n\t\t\t\t\t\t\tnewObj[this.idCol] = result.lastID\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn newObj\n\t\t\t\t  })\n\t\t}\n\t}\n\n\t_colSql(colName) {\n\t\treturn this.columns[colName] ? this.columns[colName].sql : colName\n\t}\n\n\t// Converts a row or array of rows to objects\n\ttoObj = (thing, options) => {\n\t\tif (!thing) {\n\t\t\treturn\n\t\t}\n\t\tif (Array.isArray(thing)) {\n\t\t\treturn thing.map(r => this.parseRow(r, options))\n\t\t}\n\t\treturn this.parseRow(thing, options)\n\t}\n\n\t/**\n\t * @typedef SearchOptions\n\t * @type {Object}\n\t * @property {object} [attrs]: literal value search, for convenience\n\t * @property {object<array<*>>} [where]: sql expressions as keys with arrays of applicable parameters as values\n\t * @property {string} [join]: arbitrary join clause. Not processed at all\n\t * @property {array<*>} [joinVals]: values needed by the join clause\n\t * @property {object} [sort]: object with sql expressions as keys and 1/-1 for direction\n\t * @property {number} [limit]: max number of rows to return\n\t * @property {number} [offset]: number of rows to skip\n\t * @property {array<string>} [cols]: override the columns to select\n\t * @property {string} [cursor]: opaque value telling from where to continue\n\t * @property {boolean} [noCursor]: do not calculate cursor\n\t * @property {boolean} [noTotal]: do not calculate totals\n\t */\n\n\t/**\n\t * Parses query options into query parts. Override this function to implement search behaviors.\n\t * @param {SearchOptions} options - the query options\n\t */\n\t// eslint-disable-next-line complexity\n\tmakeSelect(options) {\n\t\tif (process.env.NODE_ENV !== 'production') {\n\t\t\tconst extras = Object.keys(options).filter(\n\t\t\t\tk =>\n\t\t\t\t\t![\n\t\t\t\t\t\t'attrs',\n\t\t\t\t\t\t'cols',\n\t\t\t\t\t\t'cursor',\n\t\t\t\t\t\t'join',\n\t\t\t\t\t\t'joinVals',\n\t\t\t\t\t\t'limit',\n\t\t\t\t\t\t'noCursor',\n\t\t\t\t\t\t'noTotal',\n\t\t\t\t\t\t'offset',\n\t\t\t\t\t\t'sort',\n\t\t\t\t\t\t'where',\n\t\t\t\t\t].includes(k)\n\t\t\t)\n\t\t\tif (extras.length) {\n\t\t\t\tconsole.warn('Got unknown options for makeSelect:', extras, options) // eslint-disable-line no-console\n\t\t\t}\n\t\t}\n\t\tlet {\n\t\t\tcols,\n\t\t\tattrs,\n\t\t\tjoin,\n\t\t\tjoinVals,\n\t\t\twhere,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tsort,\n\t\t\tcursor,\n\t\t\tnoCursor,\n\t\t\tnoTotal,\n\t\t} = options\n\t\tcols = cols || this.selectColNames\n\t\tlet cursorColNames, cursorQ, cursorArgs\n\t\tconst makeCursor = limit && !noCursor\n\n\t\tif (makeCursor || cursor) {\n\t\t\t// We need a tiebreaker sort for cursors\n\t\t\tsort = sort && sort[this.idCol] ? sort : {...sort, [this.idCol]: 100000}\n\t\t}\n\t\tconst sortNames =\n\t\t\tsort &&\n\t\t\tObject.keys(sort)\n\t\t\t\t.filter(k => sort[k])\n\t\t\t\t.sort((a, b) => Math.abs(sort[a]) - Math.abs(sort[b]))\n\t\tif (makeCursor || cursor) {\n\t\t\tlet copiedCols = false\n\t\t\t// We need the sort columns in the output to get the cursor value\n\t\t\tsortNames.forEach(colName => {\n\t\t\t\tif (!cols.includes(colName)) {\n\t\t\t\t\tif (!copiedCols) {\n\t\t\t\t\t\tcols = [...cols]\n\t\t\t\t\t\tcopiedCols = true\n\t\t\t\t\t}\n\t\t\t\t\tcols.push(colName)\n\t\t\t\t}\n\t\t\t})\n\t\t\tcursorColNames = sortNames.map(c =>\n\t\t\t\tthis.columns[c] ? this.columns[c].alias : c\n\t\t\t)\n\t\t}\n\n\t\tif (cursor) {\n\t\t\t// Create the sort condition for keyset pagination\n\t\t\t// a >= v0 && (a != v0 || (b >= v1 && (b != v1 || (c > v3))))\n\t\t\tconst vals = jsurl.parse(cursor)\n\t\t\tconst getDir = i => (sort[sortNames[i]] < 0 ? '<' : '>')\n\t\t\tconst l = vals.length - 1\n\t\t\tcursorQ = `${cursorColNames[l]}${getDir(l)}?`\n\t\t\tcursorArgs = [vals[l]]\n\t\t\tfor (let i = l - 1; i >= 0; i--) {\n\t\t\t\tcursorQ =\n\t\t\t\t\t`(${cursorColNames[i]}${getDir(i)}=?` +\n\t\t\t\t\t` AND (${cursorColNames[i]}!=? OR ${cursorQ}))`\n\t\t\t\tconst val = vals[i]\n\t\t\t\tcursorArgs.unshift(val, val)\n\t\t\t}\n\t\t}\n\n\t\tconst colsSql =\n\t\t\tcols === this.selectColNames\n\t\t\t\t? this.selectColsSql\n\t\t\t\t: cols\n\t\t\t\t\t\t.map(c => (this.columns[c] ? this.columns[c].select : c))\n\t\t\t\t\t\t.join(',')\n\t\tconst selectQ = `SELECT ${colsSql} FROM ${this.quoted} tbl`\n\n\t\tconst vals = []\n\t\tconst conds = []\n\t\tif (where) {\n\t\t\tfor (const w of Object.keys(where)) {\n\t\t\t\tconst val = where[w]\n\t\t\t\tif (val) {\n\t\t\t\t\tif (!Array.isArray(val)) {\n\t\t\t\t\t\tthrow new TypeError(\n\t\t\t\t\t\t\t`Error: Got where without array of args for makeSelect: ${w}, val: ${val}`\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tconds.push(w)\n\t\t\t\t\tvals.push(...where[w])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (attrs) {\n\t\t\tfor (const a of Object.keys(attrs)) {\n\t\t\t\tlet val = attrs[a]\n\t\t\t\tif (val == null) continue\n\t\t\t\tconst col = this.columns[a]\n\t\t\t\tif (!col) {\n\t\t\t\t\tthrow new Error(`Unknown column ${a}`)\n\t\t\t\t}\n\t\t\t\tconst origVal = val\n\t\t\t\tconst {where, whereVal} = col\n\t\t\t\tlet valid = true\n\t\t\t\tif (whereVal) {\n\t\t\t\t\tval = whereVal(val)\n\t\t\t\t\tif (Array.isArray(val)) {\n\t\t\t\t\t\tvals.push(...val)\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// eslint-disable-next-line max-depth\n\t\t\t\t\t\tif (val)\n\t\t\t\t\t\t\tthrow new Error(`whereVal for ${a} should return array or falsy`)\n\t\t\t\t\t\tvalid = false\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvals.push(val)\n\t\t\t\t}\n\t\t\t\tif (valid) {\n\t\t\t\t\t// Note that we don't attempt to use aliases, because of sharing the whereQ with\n\t\t\t\t\t// the total calculation, and the query optimizer recognizes the common expressions\n\t\t\t\t\tconds.push(typeof where === 'function' ? where(val, origVal) : where)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst orderQ =\n\t\t\tsortNames &&\n\t\t\tsortNames.length &&\n\t\t\t`ORDER BY ${sortNames\n\t\t\t\t.map(k => {\n\t\t\t\t\tconst col = this.columns[k]\n\t\t\t\t\t// If we selected we can use the alias\n\t\t\t\t\tconst sql = col ? (cols.includes(col.name) ? col.alias : col.sql) : k\n\t\t\t\t\treturn `${sql}${sort[k] < 0 ? ` DESC` : ``}`\n\t\t\t\t})\n\t\t\t\t.join(',')}`\n\n\t\t// note: if preparing, this can be replaced with LIMIT(?,?)\n\t\t// First is offset (can be 0) and second is limit (-1 for no limit)\n\t\tconst limitQ = limit && `LIMIT ${Number(limit) || 10}`\n\t\tconst offsetQ = offset && `OFFSET ${Number(offset) || 0}`\n\n\t\tif (join && joinVals && joinVals.length) {\n\t\t\tvals.unshift(...joinVals)\n\t\t}\n\n\t\tconst calcTotal = !(noTotal || noCursor)\n\t\tconst allConds = cursorQ ? [...conds, cursorQ] : conds\n\t\tconst allVals = cursorArgs ? [...(vals || []), ...cursorArgs] : vals\n\t\tconst allWhereQ =\n\t\t\tallConds.length && `WHERE${allConds.map(c => `(${c})`).join('AND')}`\n\t\tconst whereQ =\n\t\t\tcalcTotal &&\n\t\t\tconds.length &&\n\t\t\t`WHERE${conds.map(c => `(${c})`).join('AND')}`\n\n\t\tconst q = [selectQ, join, allWhereQ, orderQ, limitQ, offsetQ]\n\t\t\t.filter(Boolean)\n\t\t\t.join(' ')\n\t\tconst totalQ =\n\t\t\tcalcTotal &&\n\t\t\t[`SELECT COUNT(*) as t from (`, selectQ, join, whereQ, ')']\n\t\t\t\t.filter(Boolean)\n\t\t\t\t.join(' ')\n\t\treturn [q, allVals, cursorColNames, totalQ, vals]\n\t}\n\n\t/**\n\t * Search the first matching object\n\t * @param {object} attrs - simple value attributes\n\t * @param {SearchOptions} options - search options\n\t * @returns {Promise<(object|null)>} - the result or null if no match\n\t */\n\tsearchOne(attrs, options) {\n\t\tconst [q, vals] = this.makeSelect({\n\t\t\tattrs,\n\t\t\t...options,\n\t\t\tlimit: 1,\n\t\t\tnoCursor: true,\n\t\t})\n\t\treturn this.db.get(q, vals).then(this.toObj)\n\t}\n\n\t/**\n\t * Search the all matching objects\n\t * @param {object} attrs - simple value attributes\n\t * @param {SearchOptions} [options] - search options\n\t * @param {boolean} [options.itemsOnly] - return only the items array\n\t * @returns {Promise<(object|array)>} - `{items[], cursor}`. If no cursor, you got all the results. If `itemsOnly`, returns only the items array.\n\t */\n\t// Note: To be able to query the previous page with a cursor, we need to invert the sort and then reverse the result rows\n\tasync search(attrs, {itemsOnly, ...options} = {}) {\n\t\tconst [q, vals, cursorKeys, totalQ, totalVals] = this.makeSelect({\n\t\t\tattrs,\n\t\t\tnoCursor: itemsOnly,\n\t\t\t...options,\n\t\t})\n\t\tconst [rows, totalO] = await Promise.all([\n\t\t\tthis.db.all(q, vals),\n\t\t\ttotalQ && this.db.get(totalQ, totalVals),\n\t\t])\n\t\tconst items = this.toObj(rows, options)\n\t\tif (itemsOnly) return items\n\t\tlet cursor\n\t\tif (\n\t\t\toptions &&\n\t\t\t!options.noCursor &&\n\t\t\toptions.limit &&\n\t\t\trows.length === options.limit\n\t\t) {\n\t\t\tconst last = rows[rows.length - 1]\n\t\t\tcursor = jsurl.stringify(cursorKeys.map(k => last[k]), {\n\t\t\t\tshort: true,\n\t\t\t})\n\t\t}\n\t\tconst out = {items, cursor}\n\t\tif (totalO) out.total = totalO.t\n\t\treturn out\n\t}\n\n\t/**\n\t * A shortcut for setting `itemsOnly: true` on {@link search}\n\t * @param {object} attrs - simple value attributes\n\t * @param {SearchOptions} [options] - search options\n\t * @returns {Promise<array<object>>} - the search results\n\t */\n\tsearchAll(attrs, options) {\n\t\treturn this.search(attrs, {...options, itemsOnly: true})\n\t}\n\n\t/**\n\t * Check for existence of objects\n\t * @param {object|string|number} attrs - simple value attributes or the id\n\t * @param {SearchOptions} [options] - search options\n\t * @returns {Promise<boolean>} - `true` if the search would have results\n\t */\n\texists(attrs, options) {\n\t\tif (attrs && typeof attrs !== 'object') {\n\t\t\tif (this._existsSql?.db !== this.db) {\n\t\t\t\tconst where = this.columns[this.idCol].sql\n\t\t\t\tthis._existsSql = this.db.prepare(\n\t\t\t\t\t`SELECT 1 FROM ${this.quoted} tbl WHERE ${where} = ?`,\n\t\t\t\t\t`existsId ${this.name}`\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn this._existsSql.get([attrs]).then(row => !!row)\n\t\t}\n\t\tconst [q, vals] = this.makeSelect({\n\t\t\tattrs,\n\t\t\t...options,\n\t\t\tsort: undefined,\n\t\t\tlimit: 1,\n\t\t\toffset: undefined,\n\t\t\tnoCursor: true,\n\t\t\tcols: ['1'],\n\t\t})\n\t\treturn this.db.get(q, vals).then(row => !!row)\n\t}\n\n\t/**\n\t * Count of search results\n\t * @param {object} attrs - simple value attributes\n\t * @param {SearchOptions} [options] - search options\n\t * @returns {Promise<number>} - the count\n\t */\n\tcount(attrs, options) {\n\t\tconst [q, vals] = this.makeSelect({\n\t\t\tattrs,\n\t\t\t...options,\n\t\t\tsort: undefined,\n\t\t\tlimit: undefined,\n\t\t\toffset: undefined,\n\t\t\tnoCursor: true,\n\t\t\tcols: ['COUNT(*) AS c'],\n\t\t})\n\t\treturn this.db.get(q, vals).then(row => row.c)\n\t}\n\n\t/**\n\t * Numeric Aggregate Operation\n\t * @param {string} op - the SQL function, e.g. MAX\n\t * @param {string} colName - column to aggregate\n\t * @param {object} [attrs] - simple value attributes\n\t * @param {SearchOptions} [options] - search options\n\t * @returns {Promise<number>} - the result\n\t */\n\tnumAggOp(op, colName, attrs, options) {\n\t\tconst col = this.columns[colName]\n\t\tconst sql = (col && col.sql) || colName\n\t\tconst o = {\n\t\t\tattrs,\n\t\t\t...options,\n\t\t\tsort: undefined,\n\t\t\tlimit: undefined,\n\t\t\toffset: undefined,\n\t\t\tnoCursor: true,\n\t\t\tcols: [`${op}(CAST(${sql} AS NUMERIC)) AS val`],\n\t\t}\n\t\tif (col && col.ignoreNull) {\n\t\t\t// Make sure we can use the index\n\t\t\to.where = {...o.where, [`${sql} IS NOT NULL`]: []}\n\t\t}\n\t\tconst [q, vals] = this.makeSelect(o)\n\t\treturn this.db.get(q, vals).then(row => row.val)\n\t}\n\n\t/**\n\t * Maximum value\n\t * @param {string} colName - column to aggregate\n\t * @param {object} [attrs] - simple value attributes\n\t * @param {SearchOptions} [options] - search options\n\t * @returns {Promise<number>} - the result\n\t */\n\tmax(colName, attrs, options) {\n\t\treturn this.numAggOp('MAX', colName, attrs, options)\n\t}\n\n\t/**\n\t * Minimum value\n\t * @param {string} colName - column to aggregate\n\t * @param {object} [attrs] - simple value attributes\n\t * @param {SearchOptions} [options] - search options\n\t * @returns {Promise<number>} - the result\n\t */\n\tmin(colName, attrs, options) {\n\t\treturn this.numAggOp('MIN', colName, attrs, options)\n\t}\n\n\t/**\n\t * Sum values\n\t * @param {string} colName - column to aggregate\n\t * @param {object} [attrs] - simple value attributes\n\t * @param {SearchOptions} [options] - search options\n\t * @returns {Promise<number>} - the result\n\t */\n\tsum(colName, attrs, options) {\n\t\treturn this.numAggOp('SUM', colName, attrs, options)\n\t}\n\n\t/**\n\t * Average value\n\t * @param {string} colName - column to aggregate\n\t * @param {object} [attrs] - simple value attributes\n\t * @param {SearchOptions} [options] - search options\n\t * @returns {Promise<number>} - the result\n\t */\n\tavg(colName, attrs, options) {\n\t\treturn this.numAggOp('AVG', colName, attrs, options)\n\t}\n\n\t/**\n\t * Get all objects\n\t * @returns {Promise<array<object>>} - the table contents\n\t */\n\tall() {\n\t\tif (this._allSql?.db !== this.db)\n\t\t\tthis._allSql = this.db.prepare(\n\t\t\t\t`SELECT ${this.selectColsSql} FROM ${this.quoted} tbl`,\n\t\t\t\t`all ${this.name}`\n\t\t\t)\n\t\treturn this._allSql.all().then(this.toObj)\n\t}\n\n\t/**\n\t * Get an object by a unique value, like its ID\n\t * @param  {*} id - the value for the column\n\t * @param  {string} [colName=this.idCol] - the columnname, defaults to the ID column\n\t * @returns {Promise<(object|null)>} - the object if it exists\n\t */\n\tget(id, colName = this.idCol) {\n\t\tif (id == null) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(`No \"${colName}\" given for \"${this.name}\"`)\n\t\t\t)\n\t\t}\n\t\tif (this.columns[colName]._getSql?.db !== this.db) {\n\t\t\tconst where = this.columns[colName].sql\n\t\t\tthis.columns[colName]._getSql = this.db.prepare(\n\t\t\t\t`SELECT ${this.selectColsSql} FROM ${this.quoted} tbl WHERE ${where} = ?`,\n\t\t\t\t`get ${this.name}.${colName}`\n\t\t\t)\n\t\t}\n\t\treturn this.columns[colName]._getSql.get([id]).then(this.toObj)\n\t}\n\n\t/**\n\t * Get several objects by their unique value, like their ID\n\t * @param  {array<*>} ids - the values for the column\n\t * @param  {string} [colName=this.idCol] - the columnname, defaults to the ID column\n\t * @returns {Promise<array<(object|null)>>} - the objects, or null where they don't exist, in order of their requested ID\n\t */\n\tasync getAll(ids, colName = this.idCol) {\n\t\tlet {path, _getAllSql} = this.columns[colName]\n\t\tif (_getAllSql?.db !== this.db) {\n\t\t\tconst {sql: where, real, get: isSelected} = this.columns[colName]\n\t\t\tif (real && !isSelected)\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`JsonModel: Cannot getAll on get:false column ${colName}`\n\t\t\t\t)\n\t\t\t_getAllSql = this.db.prepare(\n\t\t\t\t`SELECT ${this.selectColsSql} FROM ${this.quoted} tbl WHERE ${where} IN (SELECT value FROM json_each(?))`,\n\t\t\t\t`get ${this.name}.${colName}`\n\t\t\t)\n\t\t\tthis.columns[colName]._getAllSql = _getAllSql\n\t\t}\n\t\tconst rows = await _getAllSql.all([JSON.stringify(ids)])\n\t\tconst objs = this.toObj(rows)\n\t\treturn ids.map(id => objs.find(o => get(o, path) === id))\n\t}\n\n\t/**\n\t * Get an object by a unique value, like its ID, using a cache.\n\t * This also coalesces multiple calls in the same tick into a single query,\n\t * courtesy of DataLoader.\n\t * @param  {object} [cache] - the lookup cache. It is managed with DataLoader\n\t * @param  {*} id - the value for the column\n\t * @param  {string} [colName=this.idCol] - the columnname, defaults to the ID column\n\t * @returns {Promise<(object|null)>} - the object if it exists\n\t */\n\tgetCached(cache, id, colName = this.idCol) {\n\t\tif (!cache) return this.get(id, colName)\n\t\tconst key = `_DL_${this.name}_${colName}`\n\t\tif (!cache[key]) {\n\t\t\tdbg(`creating DataLoader for ${this.name}.${colName}`)\n\t\t\t// batchSize: max is SQLITE_MAX_VARIABLE_NUMBER, default 999. Lower => less latency\n\t\t\tcache[key] = new DataLoader(ids => this.getAll(ids, colName), {\n\t\t\t\tmaxBatchSize: 100,\n\t\t\t})\n\t\t}\n\t\treturn cache[key].load(id)\n\t}\n\n\t/**\n\t * Lets you clear all the cache or just a key. Useful for when you\n\t * change only some items\n\t * @param  {object} [cache] - the lookup cache. It is managed with DataLoader\n\t * @param  {*} id - the value for the column\n\t * @param  {string} [colName=this.idCol] - the columnname, defaults to the ID column\n\t * @returns {DataLoader} - the actual cache, you can call `.prime(key, value)` on it to insert a value\n\t */\n\tclearCache(cache, id, colName = this.idCol) {\n\t\tif (!cache) return\n\t\tconst key = `_DL_${this.name}_${colName}`\n\t\tconst c = cache[key]\n\t\tif (!c) return\n\t\tif (id) return c.clear(id)\n\t\treturn c.clearAll()\n\t}\n\n\tasync each(attrs, options, fn) {\n\t\tif (!fn) {\n\t\t\tif (options) {\n\t\t\t\tif (typeof options === 'function') {\n\t\t\t\t\tfn = options\n\t\t\t\t\toptions = undefined\n\t\t\t\t} else {\n\t\t\t\t\tfn = options.fn\n\t\t\t\t\tdelete options.fn\n\t\t\t\t}\n\t\t\t} else if (typeof attrs === 'function') {\n\t\t\t\tfn = attrs\n\t\t\t\tattrs = undefined\n\t\t\t}\n\t\t\tif (!fn) throw new Error('each requires function')\n\t\t}\n\t\tif (!options) options = {}\n\t\tif (!options.limit) options.limit = 10\n\t\toptions.noCursor = false\n\t\toptions.noTotal = true\n\t\tlet cursor\n\t\tlet i = 0\n\t\tdo {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await this.search(attrs, {...options, cursor})\n\t\t\tcursor = result.cursor\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tawait settleAll(result.items, v => fn(v, i++))\n\t\t} while (cursor)\n\t}\n\n\t// --- Mutator methods below ---\n\n\t// Contract: All subclasses use set() to store values\n\tset(...args) {\n\t\t// we cannot store `set` directly on the instance because it would override subclass `set` functions\n\t\treturn this._set(...args)\n\t}\n\n\t// Change only the given fields, shallowly\n\t// upsert: also allow inserting\n\tasync updateNoTrans(obj, upsert, noReturn) {\n\t\tif (!obj) throw new Error('update() called without object')\n\t\tconst id = obj[this.idCol]\n\t\tif (id == null) {\n\t\t\tif (!upsert) throw new Error('Can only update object with id')\n\t\t\treturn this.set(obj, false, noReturn)\n\t\t}\n\t\tlet prev = await this.get(id)\n\t\tif (!upsert && !prev) throw new Error(`No object with id ${id} exists yet`)\n\t\tif (prev)\n\t\t\tfor (const [key, value] of Object.entries(obj)) {\n\t\t\t\tif (value == null) delete prev[key]\n\t\t\t\telse prev[key] = value\n\t\t\t}\n\t\telse prev = obj\n\t\treturn this.set(prev, false, noReturn)\n\t}\n\n\t/**\n\t * Update or upsert an object\n\t * @param  {object} obj The changes to store, including the id field\n\t * @param  {boolean} [upsert] Insert the object if it doesn't exist\n\t * @param  {boolean} [noReturn] Do not return the stored object\n\t * @returns {Promise<object|undefined>} A copy of the stored object\n\t */\n\tupdate(obj, upsert, noReturn) {\n\t\t// Update needs to read the object to apply the changes, so it needs a transaction\n\t\tif (this.db.inTransaction) return this.updateNoTrans(obj, upsert, noReturn)\n\t\treturn this.db.withTransaction(() =>\n\t\t\tthis.updateNoTrans(obj, upsert, noReturn)\n\t\t)\n\t}\n\n\tremove(idOrObj) {\n\t\tconst id = typeof idOrObj === 'object' ? idOrObj[this.idCol] : idOrObj\n\t\tif (this._deleteSql?.db !== this.db)\n\t\t\tthis._deleteSql = this.db.prepare(\n\t\t\t\t`DELETE FROM ${this.quoted} WHERE ${this.idColQ} = ?`,\n\t\t\t\t`del ${this.name}`\n\t\t\t)\n\t\treturn this._deleteSql.run([id])\n\t}\n\n\tdelete(idOrObj) {\n\t\tif (DEV) deprecated('deleteMethod', 'use .remove() instead of .delete()')\n\t\treturn this.remove(idOrObj)\n\t}\n\n\tchangeId(oldId, newId) {\n\t\tif (newId == null) throw new TypeError('newId must be a valid id')\n\t\tlet {_changeIdSql} = this.columns[this.idCol]\n\t\tif (_changeIdSql?.db !== this.db) {\n\t\t\tconst {quoted} = this.columns[this.idCol]\n\t\t\t_changeIdSql = this.db.prepare(\n\t\t\t\t`UPDATE ${this.quoted} SET ${quoted} = ? WHERE ${quoted} = ?`,\n\t\t\t\t`mv ${this.name}`\n\t\t\t)\n\t\t\tthis.columns[this.idCol]._changeIdSql = _changeIdSql\n\t\t}\n\t\treturn _changeIdSql.run([newId, oldId]).then(({changes}) => {\n\t\t\tif (changes !== 1) throw new Error(`row with id ${oldId} not found`)\n\t\t\treturn undefined\n\t\t})\n\t}\n}\n\nexport default JsonModel\n"],"file":"JsonModel.js"}