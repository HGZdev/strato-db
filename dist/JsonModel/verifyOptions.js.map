{"version":3,"sources":["../../src/JsonModel/verifyOptions.js"],"names":["columnPropType","process","env","NODE_ENV","PropTypes","exact","real","bool","type","oneOf","path","string","autoIncrement","alias","get","parse","func","stringify","alwaysObject","slugValue","sql","value","default","any","required","falsyBool","index","oneOfType","ignoreNull","unique","where","whereVal","in","inAll","isAnyOfArray","isArray","textSearch","verifyColumn","name","column","prevError","console","error","message","Error","checkPropTypes","jmPropTypes","options","db","object","isRequired","migrations","objectOf","up","down","migrationOptions","columns","ItemClass","idCol","keepRowId","dispatch","emitter","verifyOptions"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BO,MAAMA,cAAc,GAC1BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACG,IADH,GAEGC,mBAAUC,KAAV,CAAgB;AAChB;AACAC,EAAAA,IAAI,EAAEF,mBAAUG,IAFA;AAGhB;AACAC,EAAAA,IAAI,EAAEJ,mBAAUK,KAAV,CAAgB,CACrB,MADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,MAJqB,EAKrB,MALqB,EAMrB,MANqB,CAAhB,CAJU;AAYhBC,EAAAA,IAAI,EAAEN,mBAAUO,MAZA;AAahBC,EAAAA,aAAa,EAAER,mBAAUG,IAbT;AAchBM,EAAAA,KAAK,EAAET,mBAAUO,MAdD;AAehBG,EAAAA,GAAG,EAAEV,mBAAUG,IAfC;AAgBhBQ,EAAAA,KAAK,EAAEX,mBAAUY,IAhBD;AAiBhBC,EAAAA,SAAS,EAAEb,mBAAUY,IAjBL;AAkBhBE,EAAAA,YAAY,EAAEd,mBAAUG,IAlBR;AAmBhB;AACAY,EAAAA,SAAS,EAAEf,mBAAUY,IApBL;AAqBhBI,EAAAA,GAAG,EAAEhB,mBAAUO,MArBC;AAsBhBU,EAAAA,KAAK,EAAEjB,mBAAUY,IAtBD;AAuBhBM,EAAAA,OAAO,EAAElB,mBAAUmB,GAvBH;AAwBhBC,EAAAA,QAAQ,EAAEpB,mBAAUG,IAxBJ;AAyBhBkB,EAAAA,SAAS,EAAErB,mBAAUG,IAzBL;AA0BhB;AACA;AACAmB,EAAAA,KAAK,EAAEtB,mBAAUuB,SAAV,CAAoB,CAACvB,mBAAUG,IAAX,EAAiBH,mBAAUO,MAA3B,CAApB,CA5BS;AA6BhBiB,EAAAA,UAAU,EAAExB,mBAAUG,IA7BN;AA8BhBsB,EAAAA,MAAM,EAAEzB,mBAAUG,IA9BF;AA+BhB;AACAuB,EAAAA,KAAK,EAAE1B,mBAAUuB,SAAV,CAAoB,CAACvB,mBAAUO,MAAX,EAAmBP,mBAAUY,IAA7B,CAApB,CAhCS;AAiChBe,EAAAA,QAAQ,EAAE3B,mBAAUY,IAjCJ;AAkChB;AACAgB,EAAAA,EAAE,EAAE5B,mBAAUG,IAnCE;AAoChB0B,EAAAA,KAAK,EAAE7B,mBAAUG,IApCD;AAqChB2B,EAAAA,YAAY,EAAE9B,mBAAUG,IArCR;AAsChB4B,EAAAA,OAAO,EAAE/B,mBAAUG,IAtCH;AAuChB6B,EAAAA,UAAU,EAAEhC,mBAAUG;AAvCN,CAAhB,CAHG;;;AA6CA,MAAM8B,YAAY,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC7C,MAAItC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAC1C;AACA,UAAMqC,SAAS,GAAGC,OAAO,CAACC,KAA1B;;AACAD,IAAAA,OAAO,CAACC,KAAR,GAAgBC,OAAO,IAAI;AAC1BF,MAAAA,OAAO,CAACC,KAAR,GAAgBF,SAAhB;AACA,YAAM,IAAII,KAAJ,CAAUD,OAAV,CAAN;AACA,KAHD;;AAIAvC,uBAAUyC,cAAV,CACC;AAACN,MAAAA,MAAM,EAAEvC;AAAT,KADD,EAEC;AAACuC,MAAAA;AAAD,KAFD,EAGE,QAHF,EAIC,WAJD;;AAMAE,IAAAA,OAAO,CAACC,KAAR,GAAgBF,SAAhB;AACA;AACA;AACD,CAjBM;AAmBP;;;;;;;;;;;;;;;AAYA,MAAMM,WAAW,GAChB7C,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACG,IADH,GAEG;AACA4C,EAAAA,OAAO,EAAE3C,mBAAUC,KAAV,CAAgB;AACxB2C,IAAAA,EAAE,EAAE5C,mBAAU6C,MAAV,CAAiBC,UADG;AAExBZ,IAAAA,IAAI,EAAElC,mBAAUO,MAAV,CAAiBuC,UAFC;AAGxBC,IAAAA,UAAU,EAAE/C,mBAAUgD,QAAV,CACXhD,mBAAUuB,SAAV,CAAoB,CACnBvB,mBAAUK,KAAV,CAAgB,CAAC,KAAD,CAAhB,CADmB,EAEnBL,mBAAUY,IAFS,EAGnBZ,mBAAUC,KAAV,CAAgB;AAACgD,MAAAA,EAAE,EAAEjD,mBAAUY,IAAf;AAAqBsC,MAAAA,IAAI,EAAElD,mBAAUY;AAArC,KAAhB,CAHmB,CAApB,CADW,CAHY;AAUxBuC,IAAAA,gBAAgB,EAAEnD,mBAAU6C,MAVJ;AAWxBO,IAAAA,OAAO,EAAEpD,mBAAUgD,QAAV,CACRhD,mBAAUuB,SAAV,CAAoB,CAACvB,mBAAUY,IAAX,EAAiBhB,cAAjB,CAApB,CADQ,CAXe;AAcxByD,IAAAA,SAAS,EAAErD,mBAAUY,IAdG;AAexB0C,IAAAA,KAAK,EAAEtD,mBAAUO,MAfO;AAgBxBgD,IAAAA,SAAS,EAAEvD,mBAAUG,IAhBG;AAiBxB;AACAqD,IAAAA,QAAQ,EAAExD,mBAAUmB,GAlBI;AAmBxBsC,IAAAA,OAAO,EAAEzD,mBAAUmB;AAnBK,GAAhB;AADT,CAHJ;;AA2BO,MAAMuC,aAAa,GAAGf,OAAO,IAAI;AACvC,MAAI9C,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAC1C;AACA,UAAMqC,SAAS,GAAGC,OAAO,CAACC,KAA1B;;AACAD,IAAAA,OAAO,CAACC,KAAR,GAAgBC,OAAO,IAAI;AAC1BF,MAAAA,OAAO,CAACC,KAAR,GAAgBF,SAAhB;AACA,YAAM,IAAII,KAAJ,CAAUD,OAAV,CAAN;AACA,KAHD;;AAIAvC,uBAAUyC,cAAV,CAAyBC,WAAzB,EAAsC;AAACC,MAAAA;AAAD,KAAtC,EAAiD,SAAjD,EAA4D,WAA5D;;AACAN,IAAAA,OAAO,CAACC,KAAR,GAAgBF,SAAhB;AACA;AACA;AACD,CAZM","sourcesContent":["import PropTypes from 'prop-types'\n\n/**\n * @typedef ColumnDef\n * @type {Object}\n * @property {boolean} [real=!!type] - is this a real table column\n * @property {string} [type] - sql column type as accepted by {@link DB}\n * @property {string} [path] - path to the value in the object\n * @property {boolean} [autoIncrement] - INTEGER id column only: apply AUTOINCREMENT on the column\n * @property {string} [alias] - the alias to use in SELECT statements\n * @property {boolean} [get=true] - should the column be included in search results\n * @property {function} [parse] - process the value after getting from DB\n * @property {function} [stringify] - process the value before putting into DB\n * @property {boolean} [alwaysObject] - the value is an object and must always be there. If this is a real column, a NULL column value will be replaced by `{}` and vice versa.\n * @property {function} [value] - function getting object and returning the value for the column; this creates a real column. Right now the column value is not regenerated for existing rows.\n * @property {function} [slugValue] - same as value, but the result is used to generate a unique slug\n * @property {string} [sql] - any sql expression to use in SELECT statements\n * @property {*} [default] - if the value is nullish, this will be stored instead\n * @property {boolean} [required] - throw when trying to store a NULL\n * @property {boolean} [falsyBool] - store/retrieve this boolean value as either `true` or absent from the object\n * @property {boolean} [index] - should it be indexed? If `unique` is false, NULLs are never indexed\n * @property {boolean} [ignoreNull=!unique] - are null values ignored in the index?\n * @property {boolean} [unique] - should the index enforce uniqueness?\n * @property {function} [whereVal] - a function returning the `vals` give to `where`. It should return falsy or an array of values.\n * @property {(string|function)} [where] - the where clause for querying, or a function returning one given `(vals, origVals)`\n * @property {boolean} [isArray] - this column contains an array of values\n * @property {boolean} [in] - to query, this column value must match one of the given array items\n * @property {boolean} [inAll] - [isArray only] to query, this column value must match all of the given array items\n * @property {boolean} [textSearch] - perform searches as substring search with LIKE\n * @property {boolean} [isAnyOfArray] - alias for isArray+inAll\n */\n\nexport const columnPropType =\n\tprocess.env.NODE_ENV === 'production'\n\t\t? null\n\t\t: PropTypes.exact({\n\t\t\t\t// === sql column ===\n\t\t\t\treal: PropTypes.bool,\n\t\t\t\t// column type if real column\n\t\t\t\ttype: PropTypes.oneOf([\n\t\t\t\t\t'TEXT',\n\t\t\t\t\t'NUMERIC',\n\t\t\t\t\t'INTEGER',\n\t\t\t\t\t'REAL',\n\t\t\t\t\t'BLOB',\n\t\t\t\t\t'JSON',\n\t\t\t\t]),\n\t\t\t\tpath: PropTypes.string,\n\t\t\t\tautoIncrement: PropTypes.bool,\n\t\t\t\talias: PropTypes.string,\n\t\t\t\tget: PropTypes.bool,\n\t\t\t\tparse: PropTypes.func,\n\t\t\t\tstringify: PropTypes.func,\n\t\t\t\talwaysObject: PropTypes.bool,\n\t\t\t\t// === value related ===\n\t\t\t\tslugValue: PropTypes.func,\n\t\t\t\tsql: PropTypes.string,\n\t\t\t\tvalue: PropTypes.func,\n\t\t\t\tdefault: PropTypes.any,\n\t\t\t\trequired: PropTypes.bool,\n\t\t\t\tfalsyBool: PropTypes.bool,\n\t\t\t\t// === index ===\n\t\t\t\t// create index for this column\n\t\t\t\tindex: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n\t\t\t\tignoreNull: PropTypes.bool,\n\t\t\t\tunique: PropTypes.bool,\n\t\t\t\t// === queries ===\n\t\t\t\twhere: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\t\t\t\twhereVal: PropTypes.func,\n\t\t\t\t// === query helpers ===\n\t\t\t\tin: PropTypes.bool,\n\t\t\t\tinAll: PropTypes.bool,\n\t\t\t\tisAnyOfArray: PropTypes.bool,\n\t\t\t\tisArray: PropTypes.bool,\n\t\t\t\ttextSearch: PropTypes.bool,\n\t\t  })\n\nexport const verifyColumn = (name, column) => {\n\tif (process.env.NODE_ENV !== 'production') {\n\t\t/* eslint-disable no-console */\n\t\tconst prevError = console.error\n\t\tconsole.error = message => {\n\t\t\tconsole.error = prevError\n\t\t\tthrow new Error(message)\n\t\t}\n\t\tPropTypes.checkPropTypes(\n\t\t\t{column: columnPropType},\n\t\t\t{column},\n\t\t\t`column`,\n\t\t\t'JsonModel'\n\t\t)\n\t\tconsole.error = prevError\n\t\t/* eslint-enable no-console */\n\t}\n}\n\n/**\n * @typedef JMOptions\n * @type {Object}\n * @property {DB} db - a DB instance, normally passed by DB\n * @property {string} name - the table name\n * @property {Object} [migrations] - an object with migration functions. They are ran in alphabetical order\n * @property {Object} [migrationOptions] - free-form data passed to the migration functions\n * @property {Object} [columns] - the column definitions as {@link ColumnDef} objects. Each value must be a columndef or a function returning a columndef.\n * @property {function} [ItemClass] - an object class to use for results, must be able to handle `Object.assign(item, result)`\n * @property {string} [idCol='id'] - the key of the ID column\n * @property {boolean} [keepRowId] - preserve row id after vacuum\n */\nconst jmPropTypes =\n\tprocess.env.NODE_ENV === 'production'\n\t\t? null\n\t\t: {\n\t\t\t\toptions: PropTypes.exact({\n\t\t\t\t\tdb: PropTypes.object.isRequired,\n\t\t\t\t\tname: PropTypes.string.isRequired,\n\t\t\t\t\tmigrations: PropTypes.objectOf(\n\t\t\t\t\t\tPropTypes.oneOfType([\n\t\t\t\t\t\t\tPropTypes.oneOf([false]),\n\t\t\t\t\t\t\tPropTypes.func,\n\t\t\t\t\t\t\tPropTypes.exact({up: PropTypes.func, down: PropTypes.func}),\n\t\t\t\t\t\t])\n\t\t\t\t\t),\n\t\t\t\t\tmigrationOptions: PropTypes.object,\n\t\t\t\t\tcolumns: PropTypes.objectOf(\n\t\t\t\t\t\tPropTypes.oneOfType([PropTypes.func, columnPropType])\n\t\t\t\t\t),\n\t\t\t\t\tItemClass: PropTypes.func,\n\t\t\t\t\tidCol: PropTypes.string,\n\t\t\t\t\tkeepRowId: PropTypes.bool,\n\t\t\t\t\t// Harmless props passed by ESDB\n\t\t\t\t\tdispatch: PropTypes.any,\n\t\t\t\t\temitter: PropTypes.any,\n\t\t\t\t}),\n\t\t  }\n\nexport const verifyOptions = options => {\n\tif (process.env.NODE_ENV !== 'production') {\n\t\t/* eslint-disable no-console */\n\t\tconst prevError = console.error\n\t\tconsole.error = message => {\n\t\t\tconsole.error = prevError\n\t\t\tthrow new Error(message)\n\t\t}\n\t\tPropTypes.checkPropTypes(jmPropTypes, {options}, 'options', 'JsonModel')\n\t\tconsole.error = prevError\n\t\t/* eslint-enable no-console */\n\t}\n}\n"],"file":"verifyOptions.js"}