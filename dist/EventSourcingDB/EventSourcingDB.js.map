{"version":3,"sources":["../../src/EventSourcingDB/EventSourcingDB.js"],"names":["dbg","wait","ms","Promise","r","setTimeout","registerHistoryMigration","rwDb","queue","registerMigrations","up","db","oldTable","all","length","some","c","name","allDone","resolve","each","row","then","set","json","undefined","JSON","parse","console","error","file","errorToString","msg","stack","message","String","Error","replace","fixupOldReducer","reducer","DEV","prev","args","model","event","EventSourcingDB","EventEmitter","constructor","models","queueFile","withViews","onWillOpen","onBeforeMigrations","prevOBM","onDidOpen","prevODO","dbOptions","lastV","errorCount","enabled","_minVersion","MAX_RETRY","close","getNext","getVersion","_isPolling","resultEvent","withTransaction","v","nowV","run","result","_handleEvent","failedResult","_resultQueue","catch","__BE_QUIET","_SQLite","path","walkEvents","ev","p","type","events","i","sub","_triggerEventListeners","_reallyStop","process","env","NODE_ENV","setMaxListeners","Object","keys","TypeError","DB","_knownV","userVersion","setKnownV","readOnly","open","qDb","EventQueue","columns","qDbFile","uv","hasMetadata","get","vObj","Number","count","exec","store","rwStore","_reducerNames","_deriverModels","_preprocModels","_readWriters","reducers","migrationOptions","dispatch","bind","modelDef","entries","preprocessor","deriver","Model","ESModel","RWModel","rest","TYPE","e","hasOne","rwModel","addModel","emitter","setWritable","push","stopPolling","checkForEvents","qV","getMaxV","startPolling","waitForQueue","handledVersion","wantVersion","module","hot","dispose","_waitingP","_waitForEvent","exit","cancelNext","data","ts","add","_subDispatch","_getVersionP","finally","reject","_waitingFor","_maxWaitingFor","o","promise","vStr","listenerCount","emit","_preprocessor","isMainEvent","newEvent","_reducer","freeze","map","helpers","out","Array","isArray","n","origEvent","depth","_handle","repeat","_applyEvent","subEvent","doneEvent","readWriters","phase","applyResult"],"mappings":"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","sourcesContent":["// Event Sourcing DataBase\n// * Only allows changes via messages that are stored and processed. This allows easy\n//   replication, debugging and possibly even rollback\n// * All the database tables participating should only be changed via events\n// * The current version is stored in the SQLite `user_version` pragma and corresponds to the last event applied\n// * Events describe facts that happened\n//   * Think of them as newspaper clippings (that changed) or notes passed to the kitchen (this change requested)\n//   * Should not require outside-db data to know how to handle them. Otherwise, split them in parts\n// * Models store the data in a table an define preprocessor, reducer, applyEvent and deriver\n// * Events:\n//   * have version `v`, strictly ordered\n//   * are added to `history` table in a single transaction, and then processed asynchronously in a separate transaction\n//   * result of processing is stored in `history`\n// * Each event is handled separately and serially in a single transaction:\n//   * Preprocessors canonicalize the event\n//   * Reducers get the table at `v-1` and the event, and describe the change for version `v` into a result object\n//   * Once all reducers ran, the result objects are passed to model.applyEvent that changes the db\n//   * Then the derivers run, they can post-process the db for calculating or caching\n//     * Another option is a writable table with lazy user-space calculation. Delete entries in the deriver when they become invalid\n//   * Then the transaction completes and the db is at version `v`\n//   * Only applyEvent and deriver get a writeable db\n// * Sub-events can be emitted at any point during processing\n//   * for example USER_REGISTERED results in USER_ADD and EMAIL_OUT\n//   * they are processed exactly like events but in the transaction of the parent event, in-process\n//   * sub-events are stored in the event in a `sub` array, for reporting and debugging\n// * To make changes to a table, change the reducer and rebuild the DB with the history, or migrate the table\n//\n// Extra notes:\n// * preprocessors should always process events statelessly - processing again should be no problem\n// * preprocessors, reducers, derivers should be pure, only working with the database state.\n// * To incorporate external state in event processing, split the event up in multiple events recording current state, and listen to the db to know what to do\n\n// * Ideally, reducers etc never fail\n// * When they fail, the whole app hangs for new events\n// * therefore all failures are exceptional and need intervention like app restart for db issues\n// * => warn immediately with error when it happens\n// * => make changing event easy, e.g. call queue.set from graphql or delete it by changing it to type 'HANDLE_FAILED' and rename .error\n\nimport debug from 'debug'\nimport {isEmpty} from 'lodash'\nimport DB from '../DB'\nimport ESModel from './ESModel'\nimport EventQueue from '../EventQueue'\nimport EventEmitter from 'events'\nimport {settleAll} from '../lib/settleAll'\nimport {DEV, deprecated} from '../lib/warning'\n\nconst dbg = debug('strato-db/ESDB')\n\nconst wait = ms => new Promise(r => setTimeout(r, ms))\n\nconst registerHistoryMigration = (rwDb, queue) => {\n\trwDb.registerMigrations('historyExport', {\n\t\t2018040800: {\n\t\t\tup: async db => {\n\t\t\t\tconst oldTable = await db.all('PRAGMA table_info(history)')\n\t\t\t\tif (\n\t\t\t\t\t!(\n\t\t\t\t\t\toldTable.length === 4 &&\n\t\t\t\t\t\toldTable.some(c => c.name === 'json') &&\n\t\t\t\t\t\toldTable.some(c => c.name === 'v') &&\n\t\t\t\t\t\toldTable.some(c => c.name === 'type') &&\n\t\t\t\t\t\toldTable.some(c => c.name === 'ts')\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\treturn\n\t\t\t\tlet allDone = Promise.resolve()\n\t\t\t\tawait db.each('SELECT * from history', row => {\n\t\t\t\t\tallDone = allDone.then(() =>\n\t\t\t\t\t\tqueue.set({...row, json: undefined, ...JSON.parse(row.json)})\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t\tawait allDone\n\t\t\t\t// not dropping table, you can do that yourself :)\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.error(`!!! history table in ${rwDb.file} is no longer needed`)\n\t\t\t},\n\t\t},\n\t})\n}\n\nconst errorToString = error => {\n\tconst msg = error\n\t\t? error.stack || error.message || String(error)\n\t\t: new Error('missing error').stack\n\treturn String(msg).replace(/\\s+/g, ' ')\n}\n\nconst fixupOldReducer = (name, reducer) => {\n\tif (!reducer) return\n\tif (reducer.length !== 1) {\n\t\tif (DEV)\n\t\t\tif (reducer.length === 0) {\n\t\t\t\tdeprecated(\n\t\t\t\t\t'varargsReducer',\n\t\t\t\t\t`${name}: reducer has a single argument now, don't use ...args`\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tdeprecated(\n\t\t\t\t\t'oldReducer',\n\t\t\t\t\t`${name}: reducer has a single argument now, like preprocessor/deriver`\n\t\t\t\t)\n\t\t\t}\n\t\tconst prev = reducer\n\t\treducer = args => prev(args.model, args.event, args)\n\t}\n\treturn reducer\n}\n\n/**\n * EventSourcingDB maintains a DB where all data is\n * atomically updated based on {@link Event events (free-form messages)}.\n * This is very similar to how Redux works in React.\n * @extends EventEmitter\n */\nclass EventSourcingDB extends EventEmitter {\n\tMAX_RETRY = 38 // this is an hour\n\n\t// eslint-disable-next-line complexity\n\tconstructor({\n\t\tqueue,\n\t\tmodels,\n\t\tqueueFile,\n\t\twithViews = true,\n\t\tonWillOpen,\n\t\tonBeforeMigrations: prevOBM,\n\t\tonDidOpen: prevODO,\n\t\t...dbOptions\n\t}) {\n\t\tsuper()\n\t\t// Prevent node warning about more than 11 listeners\n\t\t// Each model has 2 instances that might listen\n\t\tthis.setMaxListeners(Object.keys(models).length * 2 + 20)\n\t\tif (dbOptions.db)\n\t\t\tthrow new TypeError(\n\t\t\t\t'db is no longer an option, pass the db options instead, e.g. file, verbose, readOnly'\n\t\t\t)\n\t\tif (!models) throw new TypeError('models are required')\n\t\tif (queueFile && queue)\n\t\t\tthrow new TypeError('Either pass queue or queueFile')\n\n\t\tthis.rwDb = new DB({\n\t\t\t...dbOptions,\n\t\t\tonWillOpen,\n\t\t\tonBeforeMigrations: async db => {\n\t\t\t\t// hacky side-channel to get current version to queue without deadlocks\n\t\t\t\tthis._knownV = await db.userVersion()\n\t\t\t\tif (prevOBM) await prevOBM()\n\t\t\t},\n\t\t\tonDidOpen: async db => {\n\t\t\t\t// let's hope nobody added events to the queue with the wrong version\n\t\t\t\tconst {_knownV} = this\n\t\t\t\tif (_knownV) {\n\t\t\t\t\tthis._knownV = null\n\t\t\t\t\tawait this.queue.setKnownV(_knownV)\n\t\t\t\t}\n\t\t\t\tif (prevODO) await prevODO(db)\n\t\t\t},\n\t\t})\n\t\tconst {readOnly} = this.rwDb\n\n\t\t// The RO DB needs to be the same for :memory: or it won't see anything\n\t\tthis.db =\n\t\t\tthis.rwDb.file === ':memory:' || readOnly\n\t\t\t\t? this.rwDb\n\t\t\t\t: new DB({\n\t\t\t\t\t\t...dbOptions,\n\t\t\t\t\t\tname: dbOptions.name && `RO-${dbOptions.name}`,\n\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\tonWillOpen: async () => {\n\t\t\t\t\t\t\t// Make sure migrations happened before opening\n\t\t\t\t\t\t\tawait this.rwDb.open()\n\t\t\t\t\t\t},\n\t\t\t\t  })\n\n\t\tif (queue) {\n\t\t\tthis.queue = queue\n\t\t} else {\n\t\t\tconst qDb = new DB({\n\t\t\t\t...dbOptions,\n\t\t\t\tname: `${dbOptions.name || ''}Queue`,\n\t\t\t\tfile: queueFile || this.rwDb.file,\n\t\t\t\tonDidOpen: async () => {\n\t\t\t\t\t// let's hope nobody added events to the queue with the wrong version\n\t\t\t\t\tconst {_knownV} = this\n\t\t\t\t\tif (_knownV) {\n\t\t\t\t\t\tthis._knownV = null\n\t\t\t\t\t\tawait this.queue.setKnownV(_knownV)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t})\n\t\t\tthis.queue = new EventQueue({\n\t\t\t\tdb: qDb,\n\t\t\t\twithViews,\n\t\t\t\tcolumns: {events: {type: 'JSON'}},\n\t\t\t})\n\t\t}\n\t\tconst qDbFile = this.queue.db.file\n\t\t// If queue is in same file as rwDb, share the connection\n\t\t// for writing results during transaction - no deadlocks\n\t\tthis._resultQueue =\n\t\t\tthis.rwDb.file === qDbFile && qDbFile !== ':memory:'\n\t\t\t\t? new EventQueue({db: this.rwDb})\n\t\t\t\t: this.queue\n\n\t\t// Move old history data to queue DB\n\t\tif (this.rwDb.file !== qDbFile) {\n\t\t\tregisterHistoryMigration(this.rwDb, this.queue)\n\t\t}\n\t\tthis.rwDb.registerMigrations('ESDB', {\n\t\t\t// Move v2 metadata version to DB user_version\n\t\t\tuserVersion: async db => {\n\t\t\t\tconst uv = await db.userVersion()\n\t\t\t\tif (uv) return // Somehow we already have a version\n\t\t\t\tconst hasMetadata = await db.get(\n\t\t\t\t\t'SELECT 1 FROM sqlite_master WHERE name=\"metadata\"'\n\t\t\t\t)\n\t\t\t\tif (!hasMetadata) return\n\t\t\t\tconst vObj = await db.get(\n\t\t\t\t\t'SELECT json_extract(json, \"$.v\") AS v FROM metadata WHERE id=\"version\"'\n\t\t\t\t)\n\t\t\t\tconst v = vObj && Number(vObj.v)\n\t\t\t\tif (!v) return\n\t\t\t\tawait db.userVersion(v)\n\t\t\t\tconst {count} = await db.get(`SELECT count(*) AS count from metadata`)\n\t\t\t\tif (count === 1) {\n\t\t\t\t\tawait db\n\t\t\t\t\t\t.exec(\n\t\t\t\t\t\t\t`DROP TABLE metadata; DELETE FROM _migrations WHERE runKey=\"0 metadata\"`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t/* shrug */\n\t\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tawait db.run(`DELETE FROM metadata WHERE id=\"version\"`)\n\t\t\t\t}\n\t\t\t},\n\t\t})\n\n\t\tthis.store = {}\n\t\tthis.rwStore = {}\n\n\t\tthis._reducerNames = []\n\t\tthis._deriverModels = []\n\t\tthis._preprocModels = []\n\t\tthis._readWriters = []\n\t\tconst reducers = {}\n\t\tconst migrationOptions = {queue: this.queue}\n\n\t\tconst dispatch = this.dispatch.bind(this)\n\t\tfor (const [name, modelDef] of Object.entries(models)) {\n\t\t\ttry {\n\t\t\t\tif (!modelDef) throw new Error('model missing')\n\t\t\t\tlet {\n\t\t\t\t\treducer,\n\t\t\t\t\tpreprocessor,\n\t\t\t\t\tderiver,\n\t\t\t\t\tModel = ESModel,\n\t\t\t\t\tRWModel = Model,\n\t\t\t\t\t...rest\n\t\t\t\t} = modelDef\n\n\t\t\t\tif (RWModel === ESModel) {\n\t\t\t\t\tif (reducer) {\n\t\t\t\t\t\tconst prev = fixupOldReducer(name, reducer)\n\t\t\t\t\t\treducer = async args => {\n\t\t\t\t\t\t\tconst result = await prev(args)\n\t\t\t\t\t\t\tif (!result && args.event.type === model.TYPE)\n\t\t\t\t\t\t\t\treturn ESModel.reducer(args)\n\t\t\t\t\t\t\treturn result\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (preprocessor) {\n\t\t\t\t\t\tconst prev = preprocessor\n\t\t\t\t\t\tpreprocessor = async args => {\n\t\t\t\t\t\t\tconst e = await ESModel.preprocessor(args)\n\t\t\t\t\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\t\t\t\t\tif (e) args.event = e\n\t\t\t\t\t\t\treturn prev(args)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet hasOne = false\n\n\t\t\t\tconst rwModel = this.rwDb.addModel(RWModel, {\n\t\t\t\t\tname,\n\t\t\t\t\t...rest,\n\t\t\t\t\tmigrationOptions,\n\t\t\t\t\tdispatch,\n\t\t\t\t\temitter: this,\n\t\t\t\t})\n\t\t\t\trwModel.deriver = deriver || RWModel.deriver\n\t\t\t\tthis.rwStore[name] = rwModel\n\t\t\t\tif (typeof rwModel.setWritable === 'function')\n\t\t\t\t\tthis._readWriters.push(rwModel)\n\t\t\t\tif (rwModel.deriver) {\n\t\t\t\t\tthis._deriverModels.push(rwModel)\n\t\t\t\t\thasOne = true\n\t\t\t\t}\n\n\t\t\t\tlet model\n\t\t\t\tif (this.db === this.rwDb) {\n\t\t\t\t\tmodel = rwModel\n\t\t\t\t} else {\n\t\t\t\t\tmodel = this.db.addModel(Model, {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\t...rest,\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\temitter: this,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tmodel.preprocessor = preprocessor || Model.preprocessor\n\t\t\t\tmodel.reducer = fixupOldReducer(name, reducer || Model.reducer)\n\t\t\t\tthis.store[name] = model\n\t\t\t\tif (model.preprocessor) {\n\t\t\t\t\tthis._preprocModels.push(model)\n\t\t\t\t\thasOne = true\n\t\t\t\t}\n\t\t\t\tif (model.reducer) {\n\t\t\t\t\tthis._reducerNames.push(name)\n\t\t\t\t\treducers[name] = model.reducer\n\t\t\t\t\thasOne = true\n\t\t\t\t}\n\n\t\t\t\tif (!hasOne)\n\t\t\t\t\tthrow new TypeError(\n\t\t\t\t\t\t`${this.name}: At least one reducer, deriver or preprocessor required`\n\t\t\t\t\t)\n\t\t\t} catch (error) {\n\t\t\t\tif (error.message)\n\t\t\t\t\terror.message = `ESDB: while configuring model ${name}: ${error.message}`\n\t\t\t\tif (error.stack)\n\t\t\t\t\terror.stack = `ESDB: while configuring model ${name}: ${error.stack}`\n\t\t\t\tthrow error\n\t\t\t}\n\t\t}\n\t}\n\n\topen() {\n\t\treturn this.db.open()\n\t}\n\n\tasync close() {\n\t\tawait this.stopPolling()\n\t\treturn Promise.all([\n\t\t\tthis.rwDb && this.rwDb.close(),\n\t\t\tthis.db !== this.rwDb && this.db.close(),\n\t\t\tthis.queue.db.close(),\n\t\t])\n\t}\n\n\tasync checkForEvents() {\n\t\tconst [v, qV] = await Promise.all([this.getVersion(), this.queue.getMaxV()])\n\t\tif (v < qV) return this.startPolling(qV)\n\t}\n\n\tasync waitForQueue() {\n\t\t// give migrations a chance to queue things\n\t\tawait this.rwDb.open()\n\t\tconst v = await this.queue.getMaxV()\n\t\treturn this.handledVersion(v)\n\t}\n\n\t_waitingP = null\n\n\t_minVersion = 0\n\n\tstartPolling(wantVersion) {\n\t\tif (wantVersion) {\n\t\t\tif (wantVersion > this._minVersion) this._minVersion = wantVersion\n\t\t} else if (!this._isPolling) {\n\t\t\tthis._isPolling = true\n\t\t\tif (module.hot) {\n\t\t\t\tmodule.hot.dispose(() => {\n\t\t\t\t\tthis.stopPolling()\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tif (!this._waitingP) {\n\t\t\tthis._waitingP = this._waitForEvent()\n\t\t\t\t.catch(error => {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'!!! Error waiting for event! This should not happen! Please investigate!',\n\t\t\t\t\t\terror\n\t\t\t\t\t)\n\t\t\t\t\t// Crash program but leave some time to notify\n\t\t\t\t\tif (process.env.NODE_ENV !== 'test')\n\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-process-exit\n\t\t\t\t\t\tsetTimeout(() => process.exit(100), 500)\n\n\t\t\t\t\tthrow new Error(error)\n\t\t\t\t})\n\t\t\t\t.then(lastV => {\n\t\t\t\t\tthis._waitingP = null\n\t\t\t\t\t// Subtle race condition: new wantVersion coming in between end of _wait and .then\n\t\t\t\t\t// lastV is falsy when forcing a stop\n\t\t\t\t\tif (lastV != null && this._minVersion && lastV < this._minVersion)\n\t\t\t\t\t\treturn this.startPolling(this._minVersion)\n\t\t\t\t\tthis._minVersion = 0\n\t\t\t\t\treturn undefined\n\t\t\t\t})\n\t\t}\n\t\treturn this._waitingP\n\t}\n\n\tstopPolling() {\n\t\tthis._isPolling = false\n\t\tthis._reallyStop = true\n\t\tthis.queue.cancelNext()\n\t\treturn this._waitingP || Promise.resolve()\n\t}\n\n\tasync dispatch(type, data, ts) {\n\t\tconst {_knownV} = this\n\t\tif (_knownV) {\n\t\t\tthis._knownV = null\n\t\t\tawait this.queue.setKnownV(_knownV)\n\t\t}\n\t\tconst event = await this.queue.add(type, data, ts)\n\t\treturn this.handledVersion(event.v)\n\t}\n\n\t_subDispatch(event, type, data) {\n\t\tif (!event.events) event.events = []\n\t\tevent.events.push({type, data})\n\t\tdbg(`${event.type}.${type} queued`)\n\t}\n\n\t_getVersionP = null\n\n\tgetVersion() {\n\t\tif (!this._getVersionP) {\n\t\t\tthis._getVersionP = this.db.userVersion().finally(() => {\n\t\t\t\tthis._getVersionP = null\n\t\t\t})\n\t\t}\n\t\treturn this._getVersionP\n\t}\n\n\t_waitingFor = {}\n\n\t_maxWaitingFor = 0\n\n\tasync handledVersion(v) {\n\t\tif (!v) return\n\t\t// We must get the version first because our history might contain future events\n\t\tif (v <= (await this.getVersion())) {\n\t\t\tconst event = await this.queue.get(v)\n\t\t\t// The event could be missing if pruned\n\t\t\tif (event?.error) {\n\t\t\t\t// This can only happen if we skipped a failed event\n\t\t\t\treturn Promise.reject(event)\n\t\t\t}\n\t\t\treturn event\n\t\t}\n\t\tif (!this._waitingFor[v]) {\n\t\t\tif (v > this._maxWaitingFor) this._maxWaitingFor = v\n\t\t\tconst o = {}\n\t\t\tthis._waitingFor[v] = o\n\t\t\to.promise = new Promise((resolve, reject) => {\n\t\t\t\to.resolve = resolve\n\t\t\t\to.reject = reject\n\t\t\t})\n\t\t\tthis.startPolling(v)\n\t\t}\n\t\treturn this._waitingFor[v].promise\n\t}\n\n\t_triggerEventListeners(event) {\n\t\tconst o = this._waitingFor[event.v]\n\t\tif (o) delete this._waitingFor[event.v]\n\n\t\tif (event.v >= this._maxWaitingFor) {\n\t\t\t// Normally this will be empty but we might encounter a race condition\n\t\t\tfor (const vStr of Object.keys(this._waitingFor)) {\n\t\t\t\tconst v = Number(vStr)\n\t\t\t\tif (v > event.v) continue\n\t\t\t\t// Note: if the DB fails for get(), the trigger won't run and it will retry later\n\t\t\t\t// eslint-disable-next-line promise/catch-or-return\n\t\t\t\tthis.queue.get(v).then(event => this._triggerEventListeners(event))\n\t\t\t}\n\t\t}\n\n\t\t// Note that error events don't increase the DB version\n\t\tif (event.error) {\n\t\t\t// emit 'error' throws if there is no listener\n\t\t\tif (this.listenerCount('error')) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.emit('error', event)\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error('!!! \"error\" event handler threw, ignoring', error)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (o && process.env.NODE_ENV === 'test') {\n\t\t\t\tif (!this.__BE_QUIET)\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`!!! rejecting the dispatch for event ${event.v} ${event.type} - this does NOT happen outside test mode, NEVER rely on this.\n\t\t\t\t\t\tSet eSDB.__BE_QUIET to not show this message`\n\t\t\t\t\t)\n\t\t\t\to.reject(event)\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tthis.emit('result', event)\n\t\t\t} catch (error) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.error('!!! \"result\" event handler threw, ignoring', error)\n\t\t\t}\n\t\t\tif (o) o.resolve(event)\n\t\t}\n\t}\n\n\t// This is the loop that applies events from the queue. Use startPolling(false) to always poll\n\t// so that events from other processes are also handled\n\t// It would be nice to not have to poll, but sqlite triggers only work on\n\t// the connection that makes the change\n\t// This should never throw, handling errors can be done in apply\n\t_waitForEvent = async () => {\n\t\t/* eslint-disable no-await-in-loop */\n\t\tconst {rwDb} = this\n\t\tlet lastV = 0\n\t\tlet errorCount = 0\n\t\tif (dbg.enabled && this._minVersion)\n\t\t\tdbg(`waiting for events until minVersion: ${this._minVersion}`)\n\t\twhile (!this._minVersion || this._minVersion > lastV) {\n\t\t\tif (errorCount) {\n\t\t\t\tif (errorCount > this.MAX_RETRY)\n\t\t\t\t\tthrow new Error(`Giving up on processing event ${lastV + 1}`)\n\t\t\t\t// These will reopen automatically\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tthis.db.file !== ':memory:' && this.db.close(),\n\t\t\t\t\tthis.rwDb.file !== ':memory:' && this.rwDb.close(),\n\t\t\t\t\tthis.queue.db.file !== ':memory:' && this.queue.db.close(),\n\t\t\t\t])\n\t\t\t\tawait wait(5000 * errorCount)\n\t\t\t}\n\t\t\tlet event\n\t\t\ttry {\n\t\t\t\tevent = await this.queue.getNext(\n\t\t\t\t\tawait this.getVersion(),\n\t\t\t\t\t!(this._isPolling || this._minVersion)\n\t\t\t\t)\n\t\t\t} catch (error) {\n\t\t\t\terrorCount++\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.error(\n\t\t\t\t\t`!!! ESDB: queue.getNext failed - this should not happen`,\n\t\t\t\t\terror\n\t\t\t\t)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif (!event) return lastV\n\n\t\t\tconst resultEvent = await rwDb\n\t\t\t\t.withTransaction(async () => {\n\t\t\t\t\tlastV = event.v\n\n\t\t\t\t\t// It could be that it was processed elsewhere due to racing\n\t\t\t\t\tconst nowV = await this.getVersion()\n\t\t\t\t\tif (event.v <= nowV) return\n\n\t\t\t\t\tawait rwDb.run('SAVEPOINT handle')\n\t\t\t\t\tconst result = await this._handleEvent(event)\n\t\t\t\t\tif (result.error) {\n\t\t\t\t\t\t// Undo all changes, but retain the event info\n\t\t\t\t\t\tawait rwDb.run('ROLLBACK TO SAVEPOINT handle')\n\t\t\t\t\t\tif (result.result) {\n\t\t\t\t\t\t\tresult.failedResult = result.result\n\t\t\t\t\t\t\tdelete result.result\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait rwDb.run('RELEASE SAVEPOINT handle')\n\t\t\t\t\t}\n\t\t\t\t\treturn this._resultQueue.set(result)\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tif (!this.__BE_QUIET)\n\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t'!!! ESDB: an error occured outside of the normal error handlers',\n\t\t\t\t\t\t\terror\n\t\t\t\t\t\t)\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...event,\n\t\t\t\t\t\terror: {_SQLite: errorToString(error)},\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\tif (!resultEvent) continue // Another process handled the event\n\n\t\t\tif (resultEvent.error) {\n\t\t\t\terrorCount++\n\t\t\t\tif (!this.__BE_QUIET) {\n\t\t\t\t\tlet path, error\n\t\t\t\t\t// find the deepest error\n\t\t\t\t\tconst walkEvents = (ev, p = ev.type) => {\n\t\t\t\t\t\tif (ev.events) {\n\t\t\t\t\t\t\tlet i = 0\n\t\t\t\t\t\t\tfor (const sub of ev.events)\n\t\t\t\t\t\t\t\tif (walkEvents(sub, `${p}.${i++}:${sub.type}`)) return true\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ev.error) {\n\t\t\t\t\t\t\tpath = p\n\t\t\t\t\t\t\terror = ev.error\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t\twalkEvents(resultEvent)\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`!!! ESDB: event ${path} processing failed (try #${errorCount})`,\n\t\t\t\t\t\terror\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\t\tlastV = resultEvent.v - 1\n\t\t\t} else errorCount = 0\n\n\t\t\tthis._triggerEventListeners(resultEvent)\n\n\t\t\tif (this._reallyStop || (errorCount && process.env.NODE_ENV === 'test')) {\n\t\t\t\tthis._reallyStop = false\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\treturn lastV\n\t\t/* eslint-enable no-await-in-loop */\n\t}\n\n\tasync _preprocessor(event, isMainEvent) {\n\t\tfor (const model of this._preprocModels) {\n\t\t\tconst {name} = model\n\t\t\tconst {v, type} = event\n\t\t\tlet newEvent\n\t\t\ttry {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tnewEvent = await model.preprocessor({\n\t\t\t\t\tevent,\n\t\t\t\t\t// subevents must see intermediate state\n\t\t\t\t\tmodel: isMainEvent ? model : this.rwStore[name],\n\t\t\t\t\tstore: isMainEvent ? this.store : this.rwStore,\n\t\t\t\t\tdispatch: this._subDispatch.bind(this, event),\n\t\t\t\t\tisMainEvent,\n\t\t\t\t})\n\t\t\t} catch (error) {\n\t\t\t\tnewEvent = {error}\n\t\t\t}\n\t\t\t// mutation allowed\n\t\t\tif (!newEvent) newEvent = event\n\t\t\tif (!newEvent.error) {\n\t\t\t\t// Just in case event was mutated\n\t\t\t\tif (newEvent.v !== v)\n\t\t\t\t\tnewEvent.error = new Error(`preprocessor must retain event version`)\n\t\t\t\telse if (!newEvent.type)\n\t\t\t\t\tnewEvent.error = new Error(`preprocessor must retain event type`)\n\t\t\t}\n\t\t\tif (newEvent.error) {\n\t\t\t\treturn {\n\t\t\t\t\t...event,\n\t\t\t\t\tv,\n\t\t\t\t\ttype,\n\t\t\t\t\terror: {\n\t\t\t\t\t\t[`_preprocess_${name}`]: errorToString(newEvent.error),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t\t// allow other preprocessors to alter the event\n\t\t\tevent = newEvent\n\t\t}\n\t\treturn event\n\t}\n\n\tasync _reducer(event, isMainEvent) {\n\t\tconst result = {}\n\t\tconst events = event.events || []\n\n\t\tif (DEV) {\n\t\t\tObject.freeze(event.data)\n\t\t}\n\t\tawait Promise.all(\n\t\t\tthis._reducerNames.map(async name => {\n\t\t\t\tconst model = this.store[name]\n\t\t\t\tconst helpers = {\n\t\t\t\t\tevent,\n\t\t\t\t\t// subevents must see intermediate state\n\t\t\t\t\tmodel: isMainEvent ? model : this.rwStore[name],\n\t\t\t\t\tstore: isMainEvent ? this.store : this.rwStore,\n\t\t\t\t\tdispatch: this._subDispatch.bind(this, event),\n\t\t\t\t\tisMainEvent,\n\t\t\t\t}\n\t\t\t\tlet out\n\t\t\t\ttry {\n\t\t\t\t\tout = await model.reducer(helpers)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tout = {\n\t\t\t\t\t\terror: errorToString(error),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// in <v3 we allowed returning the model to indicate no change\n\t\t\t\tif (!out || out === model) return\n\t\t\t\tif (out.events) {\n\t\t\t\t\tif (!Array.isArray(out.events)) {\n\t\t\t\t\t\tresult[name] = {error: `.events is not an array`}\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tevents.push(...out.events)\n\t\t\t\t\tdelete out.events\n\t\t\t\t} else if ('events' in out) {\n\t\t\t\t\t// allow falsy events\n\t\t\t\t\tdelete out.events\n\t\t\t\t}\n\t\t\t\tresult[name] = out\n\t\t\t})\n\t\t)\n\n\t\tif (this._reducerNames.some(n => result[n] && result[n].error)) {\n\t\t\tconst error = {}\n\t\t\tfor (const name of this._reducerNames) {\n\t\t\t\tconst r = result[name]\n\t\t\t\tif (r && r.error) {\n\t\t\t\t\terror[`_reduce_${name}`] = r.error\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {...event, error}\n\t\t}\n\n\t\tconst resultEvent = {\n\t\t\t...event,\n\t\t\tresult,\n\t\t}\n\t\tif (events.length) resultEvent.events = events\n\t\treturn resultEvent\n\t}\n\n\tasync _handleEvent(origEvent, depth = 0) {\n\t\tconst isMainEvent = depth === 0\n\t\tlet event\n\t\tif (depth > 100) {\n\t\t\treturn {\n\t\t\t\t...origEvent,\n\t\t\t\terror: {\n\t\t\t\t\t_handle: `.${origEvent.type}: events recursing too deep`,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tdbg(`handling ${origEvent.v} ${'>'.repeat(depth)}${origEvent.type}`)\n\t\tevent = {\n\t\t\t...origEvent,\n\t\t\tresult: undefined,\n\t\t\tevents: undefined,\n\t\t\terror: undefined,\n\t\t}\n\n\t\tevent = await this._preprocessor(event, isMainEvent)\n\t\tif (event.error) return event\n\n\t\tevent = await this._reducer(event, isMainEvent)\n\t\tif (event.error) return event\n\n\t\tevent = await this._applyEvent(event, isMainEvent)\n\t\tif (event.error) return event\n\n\t\t// handle sub-events in order\n\t\tif (event.events) {\n\t\t\tfor (let i = 0; i < event.events.length; i++) {\n\t\t\t\tconst subEvent = event.events[i]\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst doneEvent = await this._handleEvent(\n\t\t\t\t\t{...subEvent, v: event.v},\n\t\t\t\t\tdepth + 1\n\t\t\t\t)\n\t\t\t\tdelete doneEvent.v\n\t\t\t\tevent.events[i] = doneEvent\n\t\t\t\tconst {error} = doneEvent\n\t\t\t\tif (error) {\n\t\t\t\t\tif (depth && error._handle)\n\t\t\t\t\t\t// pass the error upwards but leave on bottom-most\n\t\t\t\t\t\tdelete doneEvent.error\n\t\t\t\t\tevent.error = {\n\t\t\t\t\t\t_handle: `.${subEvent.type}${\n\t\t\t\t\t\t\terror._handle ? error._handle : ` failed`\n\t\t\t\t\t\t}`,\n\t\t\t\t\t}\n\t\t\t\t\treturn event\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event\n\t}\n\n\tasync _applyEvent(event, isMainEvent) {\n\t\tconst {rwStore, rwDb, _readWriters: readWriters} = this\n\t\tlet phase = '???'\n\t\ttry {\n\t\t\tfor (const model of readWriters) model.setWritable(true)\n\t\t\tconst {result} = event\n\n\t\t\tif (result && !isEmpty(result)) {\n\t\t\t\tphase = 'apply'\n\t\t\t\t// Apply reducer results, wait for all to settle\n\t\t\t\tawait settleAll(\n\t\t\t\t\tObject.entries(result),\n\t\t\t\t\tasync ([name, r]) => r && rwStore[name].applyResult(r)\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (isMainEvent) {\n\t\t\t\tphase = 'version'\n\t\t\t\tawait rwDb.userVersion(event.v)\n\t\t\t}\n\n\t\t\t// Apply derivers\n\t\t\tif (!event.error && this._deriverModels.length) {\n\t\t\t\tphase = 'derive'\n\t\t\t\tawait settleAll(this._deriverModels, async model =>\n\t\t\t\t\tmodel.deriver({\n\t\t\t\t\t\tevent,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t// derivers can write anywhere (carefully)\n\t\t\t\t\t\tstore: this.rwStore,\n\t\t\t\t\t\tdispatch: this._subDispatch.bind(this, event),\n\t\t\t\t\t\tisMainEvent,\n\t\t\t\t\t\tresult: result[model.name],\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (event.result) {\n\t\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\t\tevent.failedResult = event.result\n\t\t\t\tdelete event.result\n\t\t\t}\n\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\tif (!event.error) event.error = {}\n\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\tevent.error[`_apply_${phase}`] = errorToString(error)\n\t\t} finally {\n\t\t\tfor (const model of readWriters) model.setWritable(false)\n\t\t}\n\n\t\treturn event\n\t}\n}\n\nexport default EventSourcingDB\n"],"file":"EventSourcingDB.js"}