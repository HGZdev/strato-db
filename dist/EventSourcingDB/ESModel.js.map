{"version":3,"sources":["../../src/EventSourcingDB/ESModel.js"],"names":["undefToNull","data","Array","isArray","map","Object","getPrototypeOf","prototype","out","entries","forEach","key","value","getId","model","id","idCol","columns","call","getNextId","calcUpd","prev","obj","complete","changed","pVal","keys","undefined","ESModel","JsonModel","constructor","dispatch","init","emitter","options","migrations","queue","add","INIT","name","writable","clearMax","_maxId","db","on","setWritable","state","set","insertOnly","noReturn","meta","DEV","Error","d","INSERT","SET","result","TYPE","r","esFail","get","update","o","upsert","TypeError","SAVE","UPDATE","push","updateNoTrans","remove","idOrObj","REMOVE","changeId","max","applyResult","preprocessor","event","isMainEvent","type","reducer","action","exists","rm","upd","ins"],"mappings":"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","sourcesContent":["// Drop-in replacement for JsonModel\n// Caveats:\n// * `.update()` returns the current object at the time of returning, not the one that was updated\n//\n// Events all type `es/name` and data `[actionEnum, id, obj, meta]`\n// The id is assigned by the preprocessor except for RM\n\nimport JsonModel from '../JsonModel'\nimport {DEV} from '../lib/warning'\nimport {isEqual} from 'lodash'\nimport applyResult from './applyResult'\n\nexport const undefToNull = data => {\n\tif (data == null) return null\n\tif (typeof data !== 'object') return data\n\tif (Array.isArray(data)) return data.map(undefToNull)\n\tif (Object.getPrototypeOf(data) !== Object.prototype) return data\n\tconst out = {}\n\tObject.entries(data).forEach(([key, value]) => {\n\t\tout[key] = undefToNull(value)\n\t})\n\treturn out\n}\n\nexport const getId = async (model, data) => {\n\tlet id = data[model.idCol]\n\tif (id == null) {\n\t\t// Be sure to call with model as this, like in JsonModel\n\t\tid = await model.columns[model.idCol].value.call(model, data)\n\t}\n\t// This can only happen for integer ids\n\tif (id == null) id = await model.getNextId()\n\treturn id\n}\n\n// Calculate the update given two objects that went\n// through JSON stringify+parse\nconst calcUpd = (idCol, prev, obj, complete) => {\n\tconst out = {}\n\tlet changed = false\n\tfor (const [key, value] of Object.entries(obj)) {\n\t\tconst pVal = prev[key]\n\t\tif (value == null && pVal != null) {\n\t\t\tout[key] = null\n\t\t\tchanged = true\n\t\t} else if (!isEqual(value, pVal)) {\n\t\t\tout[key] = value\n\t\t\tchanged = true\n\t\t}\n\t}\n\tif (complete)\n\t\tfor (const key of Object.keys(prev))\n\t\t\tif (!(key in obj)) {\n\t\t\t\tout[key] = null\n\t\t\t\tchanged = true\n\t\t\t}\n\tif (changed) {\n\t\tout[idCol] = prev[idCol]\n\t\treturn out\n\t}\n\treturn undefined\n}\n\n/**\n * ESModel is a drop-in wrapper around JsonModel to turn changes into events.\n *\n * Use it to convert your database to be event sourcing\n *\n * Event data is encoded as an array: `[subtype, id, data, meta]`\n * Subtype is one of `ESModel.(REMOVE|SET|INSERT|UPDATE|SAVE)`.\n * `id` is filled in by the preprocessor at the time of the event.\n * `meta` is free-form data about the event. It is just stored in the history table.\n *\n * For example: `model.set({foo: true})` would result in the event\n * `[1, 1, {foo: true}]`\n * @extends JsonModel\n */\nclass ESModel extends JsonModel {\n\t/* eslint-disable lines-between-class-members */\n\tstatic REMOVE = 0\n\tstatic SET = 1\n\tstatic INSERT = 2\n\tstatic UPDATE = 3\n\tstatic SAVE = 4\n\t/* eslint-enable lines-between-class-members */\n\n\t/**\n\t * Creates a new ESModel model, called by DB\n\t * @constructor\n\t * @param  {function} dispatch - the {@link ESDB} dispatch function\n\t * @param  {boolean} [init] - emit an event with type `es/INIT:${modelname}` at table creation time, to be used by custom reducers\n\t * @param  {Object} [...options] - other params are passed to JsonModel\n\t */\n\tconstructor({dispatch, init, emitter, ...options}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmigrations: {\n\t\t\t\t...options.migrations,\n\t\t\t\t'0_init': init && (({queue}) => queue.add(this.INIT)),\n\t\t\t},\n\t\t})\n\t\tthis.dispatch = dispatch\n\t\tthis.writable = false\n\t\tconst clearMax = () => {\n\t\t\tthis._maxId = 0\n\t\t}\n\t\toptions.db.on('begin', clearMax)\n\t\temitter.on('result', clearMax)\n\t\temitter.on('error', clearMax)\n\t}\n\n\tTYPE = `es/${this.name}`\n\n\tINIT = `es/INIT:${this.name}`\n\n\t/**\n\t * Slight hack: use the writable state to fall back to JsonModel behavior.\n\t * This makes deriver and migrations work without changes.\n\t * Note: while writable, no events are created. Be careful.\n\t * @param {boolean} state - writeable or not\n\t */\n\tsetWritable(state) {\n\t\tthis.writable = state\n\t}\n\n\t/**\n\t * Insert or replace the given object into the database\n\t *\n\t * @param  {object} obj - the object to store. If there is no `id` value (or whatever the `id` column is named), one is assigned automatically.\n\t * @param  {boolean} [insertOnly] - don't allow replacing existing objects\n\t * @param  {boolean} [noReturn] - do not return the stored object; an optimization\n\t * @param  {*} [meta] - extra metadata to store in the event but not in the object\n\t * @returns {Promise<Object>} - if `noReturn` is false, the stored object is fetched from the DB\n\t */\n\tasync set(obj, insertOnly, noReturn, meta) {\n\t\tif (DEV && noReturn != null && typeof noReturn !== 'boolean')\n\t\t\tthrow new Error(`${this.name}: meta argument is now in fourth position`)\n\t\tif (this.writable) {\n\t\t\tconst id = obj[this.idCol]\n\t\t\tif (id > this._maxId) this._maxId = id\n\t\t\treturn super.set(obj, insertOnly, noReturn)\n\t\t}\n\n\t\tconst d = [insertOnly ? ESModel.INSERT : ESModel.SET, null, obj]\n\t\tif (meta) d[3] = meta\n\n\t\tconst {data, result} = await this.dispatch(this.TYPE, d)\n\t\tconst id = data[1]\n\n\t\tconst r = result[this.name]\n\t\tif (r && r.esFail) throw new Error(`${this.name}.set ${id}: ${r.esFail}`)\n\n\t\t// We have to get because we don't know what calculated values did\n\t\t// Unfortunately, this might be the object after a later event\n\t\treturn noReturn ? undefined : this.get(id)\n\t}\n\n\t/**\n\t * update an existing object\n\t * @param  {Object} o - the data to store\n\t * @param  {boolean} [upsert] - if `true`, allow inserting if the object doesn't exist\n\t * @param  {boolean} [noReturn] - do not return the stored object; an optimization\n\t * @param  {*} [meta] - extra metadata to store in the event at `data[3]` but not in the object\n\t * @returns {Promise<Object>} - if `noReturn` is false, the stored object is fetched from the DB\n\t */\n\tasync update(o, upsert, noReturn, meta) {\n\t\tif (DEV && noReturn != null && typeof noReturn !== 'boolean')\n\t\t\tthrow new Error(`${this.name}: meta argument is now in fourth position`)\n\n\t\tif (this.writable) return super.update(o, upsert, noReturn)\n\n\t\tif (DEV && noReturn != null && typeof noReturn !== 'boolean')\n\t\t\tthrow new Error(`${this.name}: meta argument is now in fourth position`)\n\t\tlet id = o[this.idCol]\n\t\tif (id == null && !upsert) throw new TypeError('No ID specified')\n\n\t\tconst d = [upsert ? ESModel.SAVE : ESModel.UPDATE, null, undefToNull(o)]\n\t\tif (meta) d.push(meta)\n\n\t\tconst {data, result} = await this.dispatch(this.TYPE, d)\n\t\tid = data[1]\n\n\t\tconst r = result[this.name]\n\t\tif (r && r.esFail) throw new Error(`${this.name}.update ${id}: ${r.esFail}`)\n\n\t\t// We have to get because we don't know what calculated values did\n\t\t// Unfortunately, this might be the object after a later event\n\t\treturn this.get(id)\n\t}\n\n\tupdateNoTrans(obj, upsert) {\n\t\tif (this.writable) return super.updateNoTrans(obj, upsert)\n\t\tthrow new Error('Non-transactional changes are not possible with ESModel')\n\t}\n\n\t/**\n\t * Remove an object\n\t * @param  {(Object|string|integer)} idOrObj - the id or the object itself\n\t * @param  {*} meta - metadata, attached to the event only, at `data[3]`\n\t * @returns {Promise<boolean>} - always returns true\n\t */\n\tasync remove(idOrObj, meta) {\n\t\tif (this.writable) return super.remove(idOrObj)\n\t\tconst id = typeof idOrObj === 'object' ? idOrObj[this.idCol] : idOrObj\n\t\tif (id == null) throw new TypeError('No ID specified')\n\n\t\tconst d = [ESModel.REMOVE, id]\n\t\tif (meta) d[3] = meta\n\n\t\tawait this.dispatch(this.TYPE, d)\n\t\treturn true\n\t}\n\n\t/** changeId: not implemented yet, had no need so far */\n\tchangeId() {\n\t\tthrow new Error(`ESModel doesn't support changeId yet`)\n\t}\n\n\t_maxId = 0\n\n\t_lastUV = 0\n\n\t/**\n\t * Returns the next available integer ID for the model.\n\t * Calling this multiple times during a redux cycle will give increasing numbers\n\t * even though the database table doesn't change.\n\t * Use this from the redux functions to assign unique ids to new objects.\n\t * @returns {Promise<number>} - the next usable ID\n\t */\n\tasync getNextId() {\n\t\tif (!this._maxId) this._maxId = await this.max(this.idCol)\n\t\treturn ++this._maxId\n\t}\n\n\t/**\n\t * Applies the result from the reducer\n\t * @param {Object} result - free-form change descriptor\n\t * @returns {Promise<void>} - Promise for completion\n\t */\n\tasync applyResult(result) {\n\t\tthis._maxId = 0\n\t\tif (result.esFail) return\n\t\treturn applyResult(this, {...result, esFail: undefined})\n\t}\n\n\t/**\n\t * Assigns the object id to the event at the start of the cycle.\n\t * When subclassing ESModel, be sure to call this too (`ESModel.preprocessor(arg)`)\n\t */\n\tstatic async preprocessor({model, event, isMainEvent}) {\n\t\tif (isMainEvent) this._maxId = 0\n\t\tif (event.type !== model.TYPE) return\n\t\tif (event.data[0] > ESModel.REMOVE) {\n\t\t\t// Always overwrite, so repeat events get correct ids\n\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\tevent.data[1] = await getId(model, event.data[2])\n\t\t\treturn event\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the desired change\n\t * ESModel will only emit `rm`, `ins`, `upd` and `esFail`\n\t * @param {object} model - the model\n\t * @param {Event} event - the event\n\t * @returns {Promise<Object>} - the result object in the format JsonModel likes\n\t */\n\tstatic async reducer({model, event: {type, data}}) {\n\t\tif (!model || type !== model.TYPE) return false\n\n\t\tlet [action, id, obj] = data\n\t\tif (action === ESModel.REMOVE) {\n\t\t\tif (await model.exists({[model.idCol]: id})) return {rm: [id]}\n\t\t\treturn false\n\t\t}\n\n\t\tif (obj[model.idCol] == null) obj = {...obj, [model.idCol]: id}\n\n\t\tconst prev = await model.get(id)\n\t\tlet update\n\t\tif (prev) {\n\t\t\tif (action === ESModel.INSERT) return {esFail: 'EEXIST'}\n\t\t\tupdate = calcUpd(model.idCol, prev, obj, action === ESModel.SET)\n\t\t\treturn update ? {upd: [update]} : false\n\t\t}\n\t\tif (action === ESModel.UPDATE) return {esFail: 'ENOENT'}\n\t\treturn {ins: [obj]}\n\t}\n}\n\nexport default ESModel\n"],"file":"ESModel.js"}